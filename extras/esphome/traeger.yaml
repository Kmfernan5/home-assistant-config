substitutions:
  name: traeger
  friendly_name: "Traeger"

globals:
  - id: hopper_empty
    type: float
    initial_value: '254.0'
  - id: hopper_full
    type: float
    initial_value: '12.0'
  - id: hopper_distance
    type: float
    initial_value: '20.0'

esphome:
  name: ${name}
  platform: ESP8266
  board: d1_mini
  
<<: !include common.yaml

spi:
  miso_pin: D0
  clk_pin: D1
  
# i2c:
#   - id: bus_a
#     sda: D5
#     scl: D6
#     scan: True

sensor:
  # https://esphome.io/components/sensor/max6675.html
  - platform: max6675
    name: "${friendly_name} Temperature"
    cs_pin: D2
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "Â°F"
    update_interval: 30s

  # # https://esphome.io/components/sensor/vl53l0x.html  
  # - platform: vl53l0x
  #   #name: "${friendly_name} Pellet Hopper"
  #   id: hopper_distance
  #   address: 0x29
  #   update_interval: 1s

  - platform: template
    id: hopper_distance_cleaned
    lambda: |-
      // need to put .state back in: id(hopper_distance).state 
      if (id(hopper_distance) > 12 && id(hopper_distance) < 255) {
        return id(hopper_distance); 
      } else {
        return {};
      }
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 1

  - platform: template
    name: "${friendly_name} Hopper Level"
    update_interval: 30s
    unit_of_measurement: "%"
    lambda: |-
      //return int(((id(hopper_empty) - id(hopper_distance_cleaned)) / id(hopper_empty)) * 100);
      return int(((id(hopper_empty) - id(hopper_distance_cleaned).state) / id(hopper_empty)) * 100);

