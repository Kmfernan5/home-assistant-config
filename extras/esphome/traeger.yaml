substitutions:
  name: traeger
  friendly_name: "Traeger"

globals:
  # Largest Distance
  - id: hopper_empty
    type: float
    initial_value: '0.28500'
  # Smallest Distance
  - id: hopper_full
    type: float
    initial_value: '0.05600'

esphome:
  name: ${name}
  platform: ESP8266
  board: d1_mini
  
<<: !include common.yaml

spi:
  miso_pin: D0
  clk_pin: D1
  
i2c:
  - id: bus_a
    sda: D5
    scl: D6
    scan: True

sensor:
  # https://esphome.io/components/sensor/max6675.html
  - platform: max6675
    name: "${friendly_name} Temperature"
    cs_pin: D2
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "Â°F"
    update_interval: 10s

  # https://esphome.io/components/sensor/vl53l0x.html  
  - platform: vl53l0x
    name: "${friendly_name} Hopper Level Raw"
    id: hopper_distance
    address: 0x29
    update_interval: 1s
    accuracy_decimals: 3
    filters: 
      - lambda: |-
          if (x <= id(hopper_full)) {
            return id(hopper_full);
          } else if (x > (id(hopper_empty) + .05)) {
            return {};
          } else if (x >= id(hopper_empty)) {
            return id(hopper_empty);
          } else {
            return x;
          };
      - sliding_window_moving_average:
          window_size: 10
          send_every: 5

  - platform: template
    name: "${friendly_name} Hopper Level Bad"
    update_interval: 5s
    unit_of_measurement: "%"
    lambda: return 100 - int(((id(hopper_distance).state - id(hopper_full)) / (id(hopper_empty)-id(hopper_full)))*100);

  - platform: template
    name: "${friendly_name} Hopper Level Good"
    update_interval: 5s
    unit_of_measurement: "%"
    lambda: |-
      float volume = 0.013361248;
      if (id(hopper_distance).state <= 0.114) {
        float rectangle1 = (0.114-id(hopper_distance).state)*0.254*0.248;
        float trapezoid = 0.00618016;
        return int(100*((rectangle1 + trapezoid) / volume));
      } 
      else {
        float side = (0.254-id(hopper_distance).state)/(tan(radians(42.6467)));
        float triangle = ((side*(0.254-id(hopper_distance).state))/2)*0.248;
        float rectangle2 = (0.254-id(hopper_distance).state)*0.102*0.248;
        return int(100*((triangle + rectangle2) / volume));
      }