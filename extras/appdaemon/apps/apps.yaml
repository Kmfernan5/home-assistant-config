AC AutoAdjust:
  module: ac_automation
  class: AutoAdjust
  constrain_input_boolean: input_boolean.ac_automation
  thermostats: climate.thermostat
  device_tracker: group.trackers
  door_trigger: binary_sensor.front_door
  morning_adjust_weekday: '09:00:00'
  morning_adjust_weekend: '11:00:00'
  night_adjust_weekday: '23:00:00'
  night_adjust_weekend: '23:00:00'
  # Below depends on the manual setting of heat or cool on the thermostat
  cool_day: '76'
  cool_night: '70'
  cool_unoccupied: '82'
  heat_day: '65'
  heat_night: '60'
  heat_unoccupied: '60'

Minimote Morning:
  module: minimote
  class: MiniMote
  constrain_start_time: "05:00:00"
  constrain_end_time: "08:00:00"
  device: zwave.bedside_remote
  # Panic is is an optional mode controlled by input boolean
  # when panic mode is on, all buttons will trigger the panic_entity
  # this should probably be a script
  panic_mode_boolean: input_boolean.panic_mode
  panic_entity: script.panic
  # Toggle = short press
  # On = long press
  scene_1_toggle: fan.master_bedroom_ceiling_fan_level
  scene_2_on: fan.master_bedroom_ceiling_fan_level
  scene_3_toggle: fan.master_bedroom_ceiling_fan_level
  scene_4_on: fan.master_bedroom_ceiling_fan_level
  scene_5_toggle: fan.master_bedroom_ceiling_fan_level
  scene_6_on: fan.master_bedroom_ceiling_fan_level
  scene_7_toggle: fan.master_bedroom_ceiling_fan_level
  scene_8_on: fan.master_bedroom_ceiling_fan_level

Minimote Non-Morning:
  module: minimote
  class: MiniMote
  constrain_start_time: "08:00:00"
  constrain_end_time: "05:00:00"
  device: zwave.bedside_remote
  # Panic is is an optional mode controlled by input boolean
  # when panic mode is on, all buttons will trigger the panic_entity
  # this should probably be a script
  panic_mode_boolean: input_boolean.panic_mode
  panic_entity: script.panic
  # Toggle = short press
  # On = long press
  scene_1_toggle: switch.master_bathroom_light_switch
  scene_2_on: script.master_bedroom_light_full
  scene_3_toggle: fan.master_bedroom_ceiling_fan_level
  scene_4_on: script.master_bedroom_light_dim
  scene_5_toggle: switch.master_bedroom_sound_machine
  scene_6_on: script.master_bedroom_bedtime
  scene_7_toggle: group.master_bedroom_lamps
  scene_8_on: script.appdaemon_ac_night

Occupancy Simulator:
  module: occusim
  class: OccuSim
  constrain_input_boolean: input_boolean.occusim
  dump_times: '1'
  reset_time: 02:00:00
  log: '1'
  #step_morning_name: Morning
  #step_morning_start: 06:00:00
  #step_morning_end: 08:00:00
  #step_morning_on_1: group.living_room_lamps
  #step_morning_off_1: group.living_room_lamps
  #step_morning_on_2: switch.kitchen_table_light_switch
  #step_morning_off_2: switch.kitchen_table_light_switch
  random_house_name: Random House
  random_house_start: Evening
  random_house_end: Night
  step_evening_name: Evening
  step_evening_start: sunset - 00:45:00
  step_night_name: Night
  step_night_start: '23:59:59'
  random_house_maxduration: 02:00:00
  random_house_minduration: 00:30:00
  random_house_number: '5'
  random_house_on_master: group.master_bedroom_lamps
  random_house_off_master: group.master_bedroom_lamps
  random_house_on_kitchen: switch.kitchen_table_light_switch
  random_house_off_kitchen: switch.kitchen_table_light_switch
  random_house_on_livingroom: group.living_room_lamps
  random_house_off_livingroom: group.living_room_lamps

NAS:
  module: entity_timer
  class: Timer
  devices: switch.nas
  time_on: '05:59:00'
  time_off: '08:00:00'

Brita Notification:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.brita_filter_change
  notification_days: 0 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: True # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to change the Brita filter!"

Andrew Vehicle:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.andrew_vehicle_registration
  notification_days: 0 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: True # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to renew Andrew's vehicle registration!"

AC Filter Notification:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.ac_filter_change
  notification_days: 0 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: True # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to change the AC filter! (20x25x1)"

Living Room Light at Night With Door:
  module: door_open
  class: DoorLight
  constrain_input_boolean: input_boolean.house_lamps_automation
  constrain_end_time: sunrise
  constrain_start_time: sunset
  door_sensor: binary_sensor.front_door
  lights: group.living_room_lamps
  # Seconds to turn entity on when triggered
  time_on: '30'

#Bed Occupancy Lamp Automation Override:
#  # Stop master bedroom lamps from automatic when in bed
#  module: follow_me
#  class: Follow
#  # leader can be a comma separated list
#  leader: binary_sensor.master_bedroom_bed
#  # follower can be a comma separated list
#  follower: input_boolean.house_lamps_automation
#  invert: True

Master Bedroom Light Dim:
  module: light_automation
  class: DeviceOn
  constrain_input_boolean: input_boolean.house_lamps_automation
  # Optional entity to constrain automation (will only run if "on")
  dependent_entity: light.master_bedroom # Optional entity to constrain automation (will only run if "on")
  constrain_presence: anyone
  time_on: '23:00:00'
  entity: scene.master_bedroom_light_dim

# All lamps in house at sunset
House Lamp Automation:
  module: light_automation
  class: DeviceOn
  # Optional entity to constrain automation (will only run if "on")
  # Using this instad of constrain_input_boolen
  dependent_entity: input_boolean.house_lamps_automation
  constrain_presence: anyone
  time_on: sunset - 00:30:00
  # Guest bedroom and living room lamps "follow" master bedroom lamps via "follow_me app"
  entity: group.master_bedroom_lamps,light.andrew_desk_lamp,light.bethany_desk_lamp

Lamps Follow:
  module: follow_me
  class: Follow
  constrain_input_boolean: input_boolean.guest_mode,off
  # leader can be a comma separated list
  leader: group.master_bedroom_lamps
  # follower can be a comma separated list
  follower: group.living_room_lamps,light.guest_nightstand_lamp

Entertainment Center Follow:
  module: follow_me
  class: Follow
  # leader can be a comma separated list
  leader: group.living_room_lamps
  # follower can be a comma separated list
  follower: switch.entertainment_center_lights,switch.christmas_tree

Door Notification and Occusim Security Follow:
  module: follow_me
  class: Follow
  # leader can be a comma separated list
  leader: input_boolean.security_status
  # follower can be a comma separated list
  follower: input_boolean.door_notify,input_boolean.occusim

Andrew Desk Keyboard Tray:
  module: follow_me
  class: Follow
  # leader can be a comma separated list
  leader: binary_sensor.andrew_desk_keyboard_tray
  # follower can be a comma separated list
  follower: group.andrew_desk

# Algo Timer:
#  module: algo_timer
#  class: SmartTimer
#  db_location: /opt/homeassistant/home-assistant_v2.db
#  entity_id: switch.bathroom_light_switch
#  debug: True

Timer:
  module: timer
  class: Timer
  timer_entity: sensor.kitchen_next_timer
  # what entity will hold the countdown state? 
  countdown_destination_entity: sensor.kitchen_timer_countdown
  # Publish to MQTT (remove mqtt entry if you don't want..)
  mqtt: True
