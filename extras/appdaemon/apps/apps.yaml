AC Automation:
  module: ac_automation
  class: AutoAdjust
  constrain_input_boolean: input_boolean.ac_automation
  thermostats: climate.thermostat
  device_tracker: group.trackers
  morning_adjust_weekday: "09:00:00"
  morning_adjust_weekend: "11:00:00"
  night_adjust_weekday: "01:00:00"
  night_adjust_weekend: "01:00:00"
  # Below depends on the manual setting of heat or cool on the thermostat
  cool_day: "78"
  cool_night: "72"
  cool_unoccupied: "82"
  heat_day: "63"
  heat_night: "62"
  heat_unoccupied: "55"

Back Bedroom Zigbee Remote:
  module: zigbee_remote
  class: EcoSmartZigbeeRemote
  device_ieee: cc:cc:cc:ff:fe:d9:03:f7
  button_1_toggle: light.back_bedroom_ceiling_fan
  button_2_toggle: switch.back_bedroom_ceiling_fan
  button_3_toggle: light.back_bedroom_lamps

Guest Bedroom EcoSmart Zigbee Remote:
  module: zigbee_remote
  class: EcoSmartZigbeeRemote
  device_ieee: cc:cc:cc:ff:fe:a9:e6:43
  button_1_toggle: light.guest_bedroom_ceiling_fan
  button_2_toggle: switch.guest_bedroom_ceiling_fan
  button_3_toggle: light.guest_bedroom_nightstand_lamp
  # Button 4 is handled through HA automation
  # for blinds

Kitchen Sengled Zigbee Remote:
  module: zigbee_remote
  class: SengledZigbeeRemote
  device_ieee: b0:ce:18:14:03:5e:06:9d
  button_1_toggle: group.christmas
  button_2_toggle: group.christmas
  button_3_toggle: group.christmas
  button_4_toggle: group.christmas
  # button_2_toggle: switch.guest_bedroom_ceiling_fan
  # button_3_toggle: light.guest_bedroom_nightstand_lamp

#Minimote Morning:
#  module: minimote
#  class: MiniMote
#  constrain_start_time: "05:00:00"
#  constrain_end_time: "08:00:00"
#  node_id: 11
#  # Panic is is an optional mode controlled by input boolean
#  # when panic mode is on, all buttons will trigger the panic_entity
#  # this should probably be a script
#  panic_mode_boolean: input_boolean.panic_mode
#  panic_entity: script.panic
#  # Toggle = short press
#  # On = long press
#  scene_1_toggle: switch.master_bedroom_ceiling_fan
#  scene_2_on: switch.master_bedroom_ceiling_fan
#  scene_3_toggle: switch.master_bedroom_ceiling_fan
#  scene_4_on: switch.master_bedroom_ceiling_fan
#  scene_5_toggle: switch.master_bedroom_ceiling_fan
#  scene_6_on: switch.master_bedroom_ceiling_fan
#  scene_7_toggle: switch.master_bedroom_ceiling_fan
#  scene_8_on: switch.master_bedroom_ceiling_fan

Minimote Non-Morning:
  module: minimote
  class: MiniMote
  constrain_start_time: "08:00:00"
  constrain_end_time: "05:00:00"
  node_id: 11
  # Panic is is an optional mode controlled by input boolean
  # when panic mode is on, all buttons will trigger the panic_entity
  # this should probably be a script
  panic_mode_boolean: input_boolean.panic_mode
  panic_entity: script.panic
  # even number = button hold
  scene_1_toggle: light.master_bedroom_ceiling_fan
  #scene_2_on: script.master_bedroom_light_full
  scene_3_toggle: switch.master_bedroom_ceiling_fan
  #scene_4_on: script.master_bedroom_light_dim
  #scene_5_toggle: switch.master_bedroom_sound_machine
  #scene_6_on: script.master_bedroom_bedtime
  scene_7_toggle: light.master_bedroom_lamps
  #scene_8_on: script.appdaemon_ac_night

Occupancy Simulator:
  module: occusim
  class: OccuSim
  enable: input_boolean.occusim
  reset_time: 02:00:00
  dump_times: "1"
  log_msg: "1"
  step_evening_name: Evening
  step_evening_start: sunset - 00:30:00
  step_night_name: Night
  step_night_start: "23:59:59"

  # Turn on some devices in the evening
  step_evening_on_1: light.master_bedroom_lamps
  step_evening_on_2: light.kitchen_table_light
  step_evening_on_3: light.andrew_desk_lamp
  #step_evening_on_4: light.office_ceiling_fan
  step_evening_on_7: light.guest_bedroom_nightstand_lamp
  step_evening_on_8: light.back_bedroom_nightstand_lamp

  #random_master_name: Master
  #random_master_start: Evening
  #random_master_end: Night
  #random_master_maxduration: 02:00:00
  #random_master_minduration: 00:30:00
  #random_master_number: '2'
  #random_master_on_1: light.master_bedroom_lamps
  #random_master_off_1: light.master_bedroom_lamps

  # Randomly turn dining room light on and off a few times
  #random_dining_name: Dining Room
  #random_dining_start: Evening
  #random_dining_end: Night
  #random_dining_maxduration: 01:00:00
  #random_dining_minduration: 00:10:00
  #random_dining_number: '3'
  #random_dining_on_1: light.dining_room_light
  #random_dining_off_1: light.dining_room_light

  #random_living_name: Living Room
  #random_living_start: Evening
  #random_living_end: Night
  #random_living_maxduration: 02:00:00
  #random_living_minduration: 00:30:00
  #random_living_number: '5'
  #random_living_on_1: light.living_room_lamps
  #random_living_off_1: light.living_room_lamps
  #random_living_on_2: light.living_room_can_lights
  #random_living_off_2: light.living_room_can_lights

  #random_office_name: Office
  #random_office_start: Evening
  #random_office_end: Night
  #random_office_maxduration: 02:00:00
  #random_office_minduration: 00:30:00
  #random_office_number: '2'
  #random_office_on_1: light.andrew_desk_lamp
  #random_office_off_1: light.andrew_desk_lamp

  # Ensure all off late
  step_dark_name: Dark
  step_dark_start: "23:32:00"
  step_dark_off_1: light.master_bedroom_lamps
  step_dark_off_2: light.dining_room_light
  step_dark_off_3: light.kitchen_table_light
  step_dark_off_5: light.andrew_desk_lamp
  #step_dark_off_6: light.office_ceiling_fan
  step_dark_off_7: light.guest_bedroom_nightstand_lamp
  step_dark_off_8: light.back_bedroom_nightstand_lamp

Workbench Shelf:
  module: follow_me
  class: Follow
  leader: switch.garage_lights
  follower: switch.workbench_shelf_leds,switch.garage_highbay_light

Bethany Office Hanging Lights:
  module: follow_me
  class: Follow
  leader: light.bethany_desk_lamp
  follower: light.bethany_office_hanging

Nexus Screen Follow:
  module: follow_me
  class: Follow
  leader: binary_sensor.weasel_active
  follower: switch.nexus_7_screen

#############
# Christmas #
#############
#Christmas Lights:
#  module: entity_timer
#  class: Timer
#  entities: switch.christmas_lights
#  time_on: sunset - 00:20:00
#  time_off: "23:30:00"
#
#Christmas Trees Follow:
#  module: follow_me
#  class: Follow
#  leader: group.christmas_trees
#  follower: switch.dining_room_christmas_tree,switch.office_christmas_tree,switch.master_bedroom_christmas_tree
#  follow_off: False # Only follow state to on
#
#Front House Christmas Trees Timer:
#  module: entity_timer
#  class: Timer
#  entities: switch.dining_room_christmas_tree,switch.office_christmas_tree
#  time_on: sunset - 00:20:00
#  time_off: '23:30:00'

############
# Aquarium #
############
# Circadian Follow:
#   module: follow_me
#   class: Follow
#   constrain_input_boolean: input_boolean.aquarium_automation
#   leader: light.aquarium_light
#   follower: switch.circadian_lighting_aquarium_circadian

# CO2:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: input_boolean.aquarium_automation
#   entities: switch.aquarium_co2
#   time_on: "07:00:00"
#   time_off: "16:30:00"

# Aquarium Light On Morning:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: input_boolean.aquarium_automation
#   entities: light.aquarium_light
#   time_on: "09:00:00"

# Aquarium Light Afternoon:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: input_boolean.aquarium_automation
#   entities: light.aquarium_light
#   time_off: "13:00:00"
#   time_on: "14:30:00"

# Aquarium Light Off Evening:
#   module: entity_timer
#   class: Timer
#   constrain_input_boolean: input_boolean.aquarium_automation
#   entities: light.aquarium_light
#   time_off: "17:30:00"

NAS:
  module: entity_timer
  class: Timer
  entities: switch.nas
  time_on: "03:00:00"
  # There is an automation to turn this off automatically after rsync
  time_off: "05:00:00"
  constrain_days: wed

Dyson Charger:
  module: entity_timer
  class: Timer
  entities: switch.garage_dyson
  time_on: "15:00:00"
  time_off: "18:00:00"
  constrain_presence: anyone

AC Filter Change:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.ac_filter_change
  notification_days: 0,-7,-14 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: False # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to change the AC filter!"

Andrew Vehicle:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.andrew_vehicle_registration
  notification_days: 7,0,-7,-14 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: False # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to renew Andrew's vehicle registration!"

Bethany Vehicle:
  module: countdown_notify
  class: Notify
  countdown_entity: sensor.bethany_vehicle_registration
  notification_days: 7,0,-7,-14 # A mandatory list of when to notify, can be 1 or more value, eg: 1,2,7,30
  notify_overdue: False # An optional argument, if true we will continue to notify after 0
  notify: pushover # The name of the notify service
  message: "It's time to renew Bethany's vehicle registration!"

Garage Exterior Light at Night With Door:
  module: door_open
  class: DoorLight
  constrain_start_time: sunset
  constrain_end_time: sunrise
  trigger_sensor: binary_sensor.garage_exterior_door
  toggle_entity: switch.garage_exterior_light
  # Seconds to turn entity on when triggered
  time_on: "5"

Backyard Flood Lights with Person Detection:
  module: door_open
  class: DoorLight
  constrain_end_time: sunrise - 01:00:00
  constrain_start_time: "22:00:00"
  trigger_sensor: binary_sensor.backyard_person_occupancy,binary_sensor.backyard_porch_person_occupancy
  toggle_entity: switch.backyard_flood_lights
  # Seconds to turn entity on when triggered
  time_on: "30"

Office Light at Night With Door:
  module: door_open
  class: DoorLight
  #constrain_input_boolean: input_boolean.house_lamps_automation
  constrain_end_time: sunrise
  constrain_start_time: sunset
  trigger_sensor: binary_sensor.front_door
  toggle_entity: light.andrew_desk_lamp
  # Seconds to turn entity on when triggered
  time_on: "60"

Kitchen Light at Night With Door:
  module: door_open
  class: DoorLight
  #constrain_input_boolean: input_boolean.house_lamps_automation
  constrain_end_time: sunrise
  constrain_start_time: sunset
  trigger_sensor: binary_sensor.garage_interior_door,binary_sensor.back_porch_door
  toggle_entity: light.kitchen_table_leds
  # Seconds to turn entity on when triggered
  time_on: "60"

Living Room Sconces at Night With Motion:
  module: door_open
  class: DoorLight
  constrain_end_time: sunrise
  constrain_input_boolean: input_boolean.guest_mode
  trigger_sensor: binary_sensor.living_room_motion
  toggle_entity: light.living_room_sconces
  brightness: 70
  # Seconds to turn entity on when triggered
  time_on: "1"

Garage Lights with Cover and Door:
  module: door_open
  class: DoorLight
  trigger_sensor: binary_sensor.garage_interior_door,binary_sensor.garage_exterior_door
  toggle_entity: switch.garage_lights
  # Turn_off is handled by automation
  #time_on: '10'

Sleepy Time Lamp Automation Override:
  # Disable / Turn off some things when sleeping
  module: follow_me
  class: Follow
  leader: switch.master_bedroom_ceiling_fan
  follower: input_boolean.house_lamps_automation,automation.turn_on_speakers_and_tv_when_xbox_powers_on
  invert: True

Indoor Light Automation Sunset:
  module: entity_timer
  class: Timer
  constrain_input_boolean: input_boolean.house_lamps_automation
  constrain_presence: anyone
  time_on: sunset - 00:20:00
  entities: light.andrew_desk_lamp,light.bethany_desk_lamp,light.living_room_lamps,light.master_bedroom_lamps,group.under_cabinet_lights,light.living_room_sconces,light.curio_cabinet #group.christmas_trees #,switch.ir_candles
  brightness: 255

Indoor Light Automation Sunset Smallgroup:
  module: entity_timer
  class: Timer
  constrain_input_boolean: input_boolean.house_lamps_automation
  constrain_presence: anyone
  constrain_days: wed
  time_on: "18:00:00"
  entities: light.andrew_desk_lamp,light.bethany_desk_lamp,light.living_room_lamps,light.master_bedroom_lamps,group.under_cabinet_lights,light.living_room_sconces,light.curio_cabinet #group.christmas_trees #,switch.ir_candles
  brightness: 255

Entryway Light Sunset Smallgroup:
  module: entity_timer
  class: Timer
  constrain_days: wed
  time_on: "18:00:00"
  time_off: "23:00:00"
  entities: light.entryway_light
  brightness: 255

Front Porch Lights Sunset:
  module: entity_timer
  class: Timer
  entities: light.front_porch_lights,light.front_sconces # See also NodeRed
  #entities: light.front_porch_lights # Christmas only front porch
  time_on: sunset - 00:20:00
  time_off: sunrise - 00:30:00
  brightness: 254

Plant Light:
  module: entity_timer
  class: Timer
  time_on: "09:30:00"
  time_off: "21:00:00"
  entities: switch.plant_light

Plant Light Corner:
  module: follow_me
  class: Follow
  leader: switch.plant_light
  follower: light.plant_light_corner

Living Room Lamp Follow:
  module: follow_me
  class: Follow
  constrain_input_boolean: input_boolean.house_lamps_automation
  leader: light.master_bedroom_lamps
  follower: light.living_room_lamps

# Candles Follow:
#   module: follow_me
#   class: Follow
#   constrain_presence: anyone
#   constrain_input_boolean: input_boolean.house_lamps_automation
#   leader: light.master_bedroom_lamps
#   follower: switch.ir_candles

Door Notification and Occusim Security Follow:
  module: follow_me
  class: Follow
  leader: input_boolean.security_status
  follower: input_boolean.door_notify,input_boolean.occusim

Timer:
  module: timer
  class: Timer
  timer_entity: sensor.kitchen_next_timer
  # what entity will hold the countdown state?
  countdown_destination_entity: sensor.kitchen_timer_countdown
  # Publish to MQTT (remove mqtt entry if you don't want..)
  mqtt: True

TV Automation Smallgroup:
  module: entity_timer
  constrain_days: wed
  class: Timer
  time_off: "18:00:00"
  time_on: "22:00:00"
  entities: automation.turn_off_speakers_when_tv_or_xbox_powers_off

Globe Lights Smallgroup:
  module: entity_timer
  constrain_days: wed
  class: Timer
  time_on: sunset - 00:20:00
  time_off: "21:00:00"
  entities: switch.globe_lights

# Turn on focus mode when desk LED on
Mac Focus Mode Follow Desk LED:
  module: follow_me
  class: Follow
  leader: light.desk_led
  follower: switch.weasel_focus
