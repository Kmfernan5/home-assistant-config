- platform: moon

- platform: uptime

- platform: dnsip

- platform: systemmonitor
  scan_interval:
    seconds: 60
  resources:
    - type: disk_use_percent
      arg: /home
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: network_in
      arg: eno1
    - type: network_out
      arg: eno1
    - type: last_boot
    - type: processor_use
    - type: load_1m
    - type: load_5m
    - type: load_15m

- platform: rest
  name: "Verizon Network Extender Status"
  resource: 'http://10.0.1.47/cgi-bin/femto_status.cgi'
  value_template: '{% if value_json.data.service_status == 0 %}In Service{% else %}Out of Service{% endif %}'
  json_attributes_path: "$.data"
  json_attributes:
    - connected_users
    - gps_status

- platform: mqtt
  state_topic: "sensor/rsync_nuc"
  name: "Last NUC Backup Completed"
  value_template: "{{ strptime(value_json.timestamp, '%Y-%m-%d %H:%M:%S') }}"

- platform: mqtt
  state_topic: "sensor/rsync_vps"
  name: "Last VPS Backup Completed"
  value_template: "{{ strptime(value_json.timestamp, '%Y-%m-%d %H:%M:%S') }}"

# - platform: command_line
#   name: Electric Utilities Realtime
#   scan_interval: 600
#   command: !secret utilities_curl_realtime
#   value_template: "{{ value_json.Kwh | float }}"
#   unit_of_measurement: 'kWh'
#   json_attributes:
#     - ReadDate

- platform: command_line
  name: Electric Utilities Daily
  scan_interval: 3600
  command: !secret utilities_curl_daily
  value_template: "{{ value_json.Kwh | float }}"  
  unit_of_measurement: 'kWh' 
  json_attributes:
    - ReadDate

- platform: command_line
  name: Electric Utilities Summary
  scan_interval: 3600
  command: !secret utilities_curl_summary
  value_template: "{{ value_json.TotalUsage | float }}"   
  unit_of_measurement: 'kWh' 
  json_attributes:
    - TotalCost
    - MinUsage
    - MaxUsage
    - AvgUsage
    - StartDate
    - EndDate

###################
# MQTT THERMOSTAT #
###################

# Provided by MQTT Discovery
# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Temperature"
#   unit_of_measurement: "°F"
#   value_template: "{{ value_json.rt }}"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Humidity"
#   unit_of_measurement: "%"
#   value_template: "{{ value_json.rh }}"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Operating Mode"
#   value_template: "{{ value_json.mode }}"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Fan Mode"
#   value_template: "{{ value_json.fan }}"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat State"
#   value_template: >
#     {% if value_json.coolicon == 'on' %}
#       Cooling
#     {% elif value_json.heaticon == 'on' %}
#       Heating
#     {% elif value_json.fanicon == 'on' %}
#       Idle Fan
#     {% elif value_json.coolicon == 'off' and value_json.heaticon == 'off' and value_json.fanicon == 'off' %}
#       Idle
#     {% else %}
#       Unknown
#     {% endif %}

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   unit_of_measurement: "°F"
#   name: "Thermostat Setpoint"
#   value_template: >
#     {% if value_json.mode == 'cool' %}
#       {{ value_json.clsp }}
#     {% elif value_json.mode == 'heat' %}
#       {{ value_json.htsp }}
#     {% endif %}

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Fan Status"
#   value_template: "{{ value_json.fanicon }}"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Hold"
#   value_template: "{{ value_json.hold }}"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Filter Hours Remain"
#   value_template: "{{ value_json.filtrlvl }}"
#   unit_of_measurement: "h"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Outdoor Coil Temperature"
#   value_template: "{{ value_json.oducoiltmp }}"
#   unit_of_measurement: "°F"

# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Outdoor Ambient Temperature"
#   value_template: "{{ value_json.oat }}"
#   unit_of_measurement: "°F"
  
# - platform: mqtt
#   state_topic: "sensor/thermostat"
#   name: "Thermostat Indoor CFM"
#   value_template: "{{ value_json.iducfm }}"
#   unit_of_measurement: "cfm"
# End Provided by MQTT Discovery

- platform: history_stats
  name: ac_runtime_today_cool
  entity_id: sensor.thermostat_state
  state: "Cooling"
  type: time
  start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
  end: "{{ now() }}"

- platform: history_stats
  name: ac_runtime_today_heat
  entity_id: sensor.thermostat_state
  state: "Heating"
  type: time
  start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
  end: "{{ now() }}"

- platform: history_stats
  name: ac_runtime_yesterday_cool
  entity_id: sensor.thermostat_state
  state: "Cooling"
  type: time
  end: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
  duration:
    hours: 24

- platform: history_stats
  name: ac_runtime_yesterday_heat
  entity_id: sensor.thermostat_state
  state: "Heating"
  type: time
  end: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
  duration:
    hours: 24

- platform: command_line
  name: CPU Temperature
  command: "echo $(($(cat /sys/class/thermal/thermal_zone0/temp)/1000))"
  unit_of_measurement: "°F"
  value_template: "{{ ((value | int) * 9 / 5) + 32 | round(1) }}"


#############
# TEMPLATES #
#############

- platform: template
  sensors:
    kitchen_timer_countdown:
      value_template: ""
      icon_template: "mdi:timer"

    kitchen_all_timers:
      friendly_name: "All Kitchen Timers"
      value_template: "{{ state_attr('sensor.kitchen_next_timer','sorted_active') | from_json | length }}"
      attribute_templates:
        timers_ending: >
          {% set ns = namespace(timers=[]) %}
          {% for i in (state_attr('sensor.kitchen_next_timer','sorted_active') | from_json) -%}
          {% set last_update = as_timestamp(state_attr('sensor.kitchen_next_timer','last_updated')) -%}
          {% set remain = i[1]['remainingTime']/1000 -%}
          {% set end_epoch = remain + last_update -%}
          {% set end_time = end_epoch | timestamp_custom('%Y-%m-%dT%H:%M:%S', True) -%}
          {% set ns.timers = ns.timers + [end_time] %}
          {% endfor %}
          {{ ns.timers }}

    ac_runtime_today:
      friendly_name: "AC Runtime Today"
      unit_of_measurement: "h"
      value_template: "{{ (states('sensor.ac_runtime_today_cool') | float + states('sensor.ac_runtime_today_heat') | float) }}"
      attribute_templates:
        value: "{{ (60 * (states('sensor.ac_runtime_today_cool') | float + states('sensor.ac_runtime_today_heat') | float)) | int }}m"

    ac_runtime_yesterday:
      friendly_name: "AC Runtime Today"
      unit_of_measurement: "h"
      value_template: "{{ (states('sensor.ac_runtime_yesterday_cool') | float + states('sensor.ac_runtime_yesterday_heat') | float) }}"
      attribute_templates:
        value: "{{ (60 * (states('sensor.ac_runtime_yesterday_cool') | float + states('sensor.ac_runtime_yesterday_heat') | float)) | int }}m"

    netatmo_home_rain_sum_rain_today_inches:
      friendly_name: Rainfall Today
      unit_of_measurement: in
      value_template: "{{ '%.2f'%((states('sensor.netatmo_home_home_rain_sum_rain_24') | float) / 25.4) }}"
      icon_template: >
        {% set amount = (states('sensor.netatmo_home_rain_sum_rain_today_inches') | float) %}
        {% if amount >= 0.50 %}
          mdi:weather-pouring
        {% elif amount > 0.00 and amount < 0.50 %}
          mdi:weather-rainy
        {% else %}
          mdi:cloud-outline
        {% endif %}

    netatmo_home_rain_sum_rain_last_hour_inches:
      friendly_name: Rainfall Last 1 Hour
      unit_of_measurement: in
      value_template: "{{ '%.2f'%((states('sensor.netatmo_home_home_rain_sum_rain_1') | float) / 25.4) }}"
      icon_template: >
        {% set amount = (states('sensor.netatmo_home_rain_sum_rain_last_hour_inches') | float) %}
        {% if amount >= 0.50 %}
          mdi:weather-pouring
        {% elif amount > 0.00 and amount < 0.50 %}
          mdi:weather-rainy
        {% else %}
          mdi:cloud-outline
        {% endif %}

    mail_deliveries_message:
      friendly_name: "Deliveries Summary"
      value_template: >
        {# Deliveries Sentence #}
          {% macro deliveries_sentence() -%}
                {%- if states("sensor.mail_usps_mail")|int(0) == 0 -%}
                  No
                {%- else -%}
                  {{states("sensor.mail_usps_mail")|int(0)}}
                {%- endif -%}
              {{' '}} 
                {%- if states("sensor.mail_usps_mail")|int(0) <= 1 -%}
                  mail
                {%- else -%}
                  pieces of mail
                {%- endif -%}
              {{' '}}will be delivered.{{' '}} 
                {%- if states("sensor.mail_packages_in_transit")|int(0) == 0 -%}
                  No
                {%- else -%}
                  {{states("sensor.mail_packages_in_transit")|int(0)}}
                {%- endif -%}
              {{' '}} 
                {%- if states("sensor.mail_packages_in_transit")|int(0) == 1 -%}
                  package is
                {%- else -%}
                  packages are
                {%- endif -%}
              {{' '}}in transit.{{' '}}
          {%- endmacro %}
        {{deliveries_sentence()}}

    nws_temperature:
      friendly_name: "Temperature"
      unit_of_measurement: "°F"
      value_template: "{{ state_attr('weather.kcll_daynight', 'temperature') }}"

    nws_humidity:
      friendly_name: "Humidity"
      unit_of_measurement: "%"
      icon_template: mdi:water-percent
      value_template: "{{ state_attr('weather.kcll_daynight', 'humidity') }}"

    nws_pressure:
      friendly_name: "Pressure"
      unit_of_measurement: "mbar"
      value_template: "{{ state_attr('weather.kcll_daynight', 'pressure') }}"

    nws_wind_speed:
      friendly_name: "Wind Speed"
      unit_of_measurement: "mph"
      icon_template: mdi:weather-windy
      value_template: "{{ state_attr('weather.kcll_daynight', 'wind_speed') }}"

    nws_precip_probability:
      friendly_name: "Percent Chance of Rain"
      unit_of_measurement: "%"
      icon_template: mdi:water-percent
      value_template: >
        {% if state_attr('weather.kcll_daynight', 'forecast')[0]['daytime'] == True %}
          {{ state_attr('weather.kcll_daynight', 'forecast')[0]['precipitation_probability'] }}
        {% else %}
          {{ state_attr('weather.kcll_daynight', 'forecast')[1]['precipitation_probability'] }}
        {% endif %}
