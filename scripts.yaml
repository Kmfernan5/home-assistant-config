############
# Presence #
############

# Turn off master and common room things, arm security
home_empty:
  sequence:
    - service: homeassistant.turn_on
      data:
        entity_id: input_boolean.security_status
    - service: homeassistant.turn_off
      data:
        entity_id: 
          - group.master_bedroom
          - group.common_areas

# Turn on lights and disarm security
home_occupied:
  sequence:
    - service: homeassistant.turn_off
      data:
        entity_id: input_boolean.security_status
    - service: light.turn_on
      data:
        entity_id: 
          - light.master_bedroom_lamps
          #- light.living_room_sconces
        # Not so bright if it's late..
        brightness: > 
          {% if now().hour >= 20 %}
          128
          {% else %}
          254
          {% endif %}
    - service: homeassistant.turn_on
      data:
        entity_id: 
          - group.under_cabinet_lights
          - group.christmas # dining, office, master tree follow 'on' via appdaemon

############
# SECURITY #
############

security_disarm:
  sequence:
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.alexa_guard_7f9e9
    # - service: alarm_control_panel.alarm_disarm
    #   entity_id: !secret alarm_panel_1
    - service: alarm_control_panel.alarm_disarm
      entity_id: !secret alarm_panel_2
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.college_station_mode
    - service: script.notify_wrapper
      data:
        message: Disarmed!

security_arm:
  sequence:
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.alexa_guard_7f9e9
    # - service: alarm_control_panel.alarm_arm_away
    #   entity_id: !secret alarm_panel_1
    - service: alarm_control_panel.alarm_arm_away
      entity_id: !secret alarm_panel_2
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.college_station_mode
    - service: script.notify_wrapper
      data:
        message: Armed!

##########
# SCENES #
##########

master_bedroom_wakeup:
  sequence:
    - service: alarm_control_panel.alarm_disarm
      entity_id: !secret alarm_panel_2
    - service: alarm_control_panel.alarm_arm_home
      entity_id: alarm_control_panel.college_station_mode
    - service: switch.turn_off
      data:
        entity_id: switch.master_bedroom_ceiling_fan
    - delay: "00:00:02"
    - service: script.appdaemon_ac_morning
    - service: scene.turn_on
      data:
        entity_id: >
          {% if 30 > (as_timestamp(now()) - as_timestamp(states.switch.master_bedroom_ceiling_fan.last_changed) | round(0)) %}
            scene.master_lamps_slow_on
          {% else %}
            scene.master_lamps_fast_on
          {% endif %}
    - service: homeassistant.turn_off
      entity_id: input_boolean.goodnight
    - service: homeassistant.turn_on
      entity_id: group.christmas

master_bedroom_bedtime:
  sequence:
    - service: script.appdaemon_ac_night
    - service: switch.turn_on
      data:
        entity_id: switch.master_bedroom_ceiling_fan
    #- service: switch.turn_on
    #  data:
    #    entity_id: switch.master_bedroom_sound_machine
    - service: light.turn_off
      data:
        entity_id: light.master_bedroom_ceiling_fan
        transition: 5
    - service: light.turn_off
      data:
        entity_id: light.master_bedroom_lamps
        transition: 5
    - service: homeassistant.turn_off
      data:
        entity_id: group.off_at_bedtime
    - service: alarm_control_panel.alarm_arm_away
      entity_id: !secret alarm_panel_2
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.college_station_mode
    - service: homeassistant.turn_on
      entity_id: input_boolean.goodnight
    - service: lock.lock
      target:
        entity_id: 
          - lock.front_door
          - lock.garage_exterior_door
    - if: "{{ states('input_boolean.guest_mode') == 'off' }}"
      then:
        - service: light.turn_off
          entity_id:
            - light.guest_bedroom_nightstand_lamp
            - light.back_bedroom_nightstand_lamp
    # - service: script.christmas_goodnight

christmas_goodnight:
  # Play Christmas music, say goodnight, fade music out, and turn off tree
  sequence:
    - service: media_player.select_source
      data:
        entity_id: media_player.spotify
        source: "Master"
    - service: media_player.volume_set
      data:
        entity_id: media_player.spotify
        volume_level: 0.55
    - service: media_player.shuffle_set
      data:
        shuffle: true
        entity_id: media_player.spotify
    - service: media_player.play_media
      data:
        media_content_id: 'spotify:playlist:3ggRyPeN5BcQSBJ2UB6G8L' # https://open.spotify.com/playlist/3ggRyPeN5BcQSBJ2UB6G8L?si=1aed5ff4d4a946af
        media_content_type: playlist
        entity_id: media_player.spotify
    - delay: "00:00:60"
    - service: notify.alexa_media_master
      data:
        data:
          type: tts
          method: speak
        message: "<prosody rate='65%'><amazon:emotion name='excited' intensity='low'>And to all a good night</amazon:emotion></prosody>"
    - delay: '00:00:02'
    - service: switch.turn_off
      entity_id: switch.master_bedroom_christmas_tree
    # Fade music out
    - repeat:
        while: "{{ state_attr('media_player.spotify', 'volume_level') > 0 }}"
        sequence:
          - service: media_player.volume_set
            data_template:
              entity_id: media_player.spotify
              volume_level: >
                {{ state_attr('media_player.spotify', 'volume_level') - 0.02 }}
          - delay: 
              seconds: 0.4
    - service: media_player.media_pause
      data_template:
        entity_id: media_player.spotify

#########
# OTHER #
#########

# Change notification platform if internet offline, or if a priority is provided
notify_wrapper:
  sequence:
    - if: '{{ states("binary_sensor.internet_reachability") == "on" }}'
      then:
        - if: '{{ "priority" in data }}'
          then:
            - service: notify.pushover
              data:
                message: '{{ message }}'
                data:
                  priority: '{{ data.priority }}'
                  expire: 600
                  retry: 30
          else:
            - service: notify.signal_self
              data:
                message: '{{ message }}'
      else:
        - if: '{{ "priority" in data }}'
          then: 
            - service: notify.gsm_message
              data: 
                message: '{{ message }}'
                data:
                  priority: '{{ data.priority }}' # passing priority to the notify_wrapper script is optional
                  # 1 results in a notification that overrides DnD
                  # 2 results in an emergency level notification (requires ack)
          else:
            - service: notify.gsm_message
              data: 
                message: '{{ message }}'

copy:
  sequence:
    - service: shell_command.copy

appdaemon_ac_night:
  sequence:
    # Also constrained by boolean in appdaemon
    - condition: state
      entity_id: input_boolean.ac_automation
      state: 'on'
    - service: rest_command.adjust_night

appdaemon_ac_morning:
  sequence:
    # Also constrained by boolean in appdaemon
    - condition: state
      entity_id: input_boolean.ac_automation
      state: 'on'
    - service: rest_command.adjust_morning

too_cold:
  sequence:
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        temperature: "{{ float(states('sensor.thermostat_temperature')) + 2 }}"

too_hot:
  sequence:
    - service: climate.set_temperature
      data:
        entity_id: climate.thermostat
        temperature: "{{ float(states('sensor.thermostat_temperature')) - 1 }}"

turn_ac_off:
  sequence:
    - service: climate.turn_off
      data:
        entity_id: climate.thermostat

# Triggered by appdaemon app
# See associated automation
panic:
  sequence:
    - service: notify.pushover
      data:
        message: "Help!"
        title: "Panic!!"
        data:
          priority: 2
          expire: 3600
          retry: 30
          callback: !secret panic_script_webhook_full

spotify_occusim_start:
  sequence:
    - service: media_player.select_source
      data:
        entity_id: media_player.spotify
        source: "Everywhere"
    - service: media_player.volume_set
      data:
        entity_id: media_player.spotify
        volume_level: 0.6
    - service: media_player.media_play
      data:
        entity_id: media_player.spotify

spotify_occusim_stop:
  sequence:
    - service: media_player.media_pause
      data:
        entity_id: media_player.spotify

andrew_phone_update_location:
  sequence:
    - service: notify.mobile_app_andrew_phone
      data:
        message: "request_location_update"
