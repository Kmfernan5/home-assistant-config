- alias: "Update README"
  initial_state: on
  trigger:
    - platform: time
      at: '11:00:00'
    - platform: time
      at: '21:00:00'
    - platform: homeassistant
      event: start
  action:
    - service: readme.generate

- alias: "Set dark theme for night"
  initial_state: on
  trigger:
    - platform: time
      at: '21:00:00'
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: '20:59:00'
    before: '08:59:00'
  action:
    - service: frontend.set_theme
      data:
        name: "Google Dark Theme"

- alias: "Set light theme for day"
  initial_state: on
  trigger:
    - platform: time
      at: '08:00'
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: '07:59:00'
    before: '20:59:00'
  action:
    service: frontend.set_theme
    data:
        name: default

- alias: 'Remove new devices notification'
  trigger:
    - platform: state
      entity_id: persistent_notification.config_entry_discovery
      to: notifying
    - platform: homeassistant
      event: start
  action:
    - service: persistent_notification.dismiss
      data:
        notification_id: config_entry_discovery

- alias: "Security Arm/Disarm"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.security_status
  action:
    service: script.turn_on
    data_template:
      entity_id: >-
        {% if trigger.to_state.state == "on" %}
          script.security_arm
        {% elif trigger.to_state.state == "off" %}
          script.security_disarm
        {% endif %}

- alias: "House Occupied/Empty"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: group.trackers
      to: not_home
      for:
        seconds: 5
    - platform: state
      entity_id: group.trackers
      to: home
  condition:
    condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
    service: script.turn_on
    data_template: 
      entity_id: >-
        {% if trigger.to_state.state == "home" %}
          script.home_occupied
        {% elif trigger.to_state.state == "not_home" %}
          script.home_empty
        {% endif %}

- alias: "Desk Button Single Press"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.andrew_desk_button_single
    to: 'on'
  action:
    service: homeassistant.toggle
    entity_id: light.bethany_desk_lamp

- alias: "Desk Button Double Press"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.andrew_desk_button_double
    to: 'on'
  action:
    service: homeassistant.toggle
    entity_id: group.andrew_desk

- alias: "Mount/Umount /Plex"
  initial_state: on
  trigger:
    - platform: state
      entity_id: switch.nas
      from: 'off'
      to: 'on'
      for:
        seconds: 30
    - platform: state
      entity_id: switch.nas
      from: 'on'
      to: 'off'
      for:
        seconds: 30
  action:
    service_template: >-
      {% if trigger.to_state.state == "on" %}
      shell_command.mount_plex
      {% elif trigger.to_state.state == "off" %}
      shell_command.umount_plex
      {% endif %}

- alias: "Notify when AC BREAKS"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: '{{ (states.sensor.thermostat_setpoint.state | int > 70) and (states.sensor.thermostat_operating_mode.state == "Heat") }}'
      - condition: template
        value_template: '{{ (states.sensor.thermostat_setpoint.state | int < 68) and (states.sensor.thermostat_operating_mode.state == "Cool") }}'
  action:
    - service: notify.pushover
      data_template:
        message: >-
          {% if states.sensor.thermostat_operating_mode.state == "Heat" %}
            AC Broke.. Turning Off.. Mode: Heat Setpoint: {{ states.sensor.thermostat_setpoint.state }}
          {% elif states.sensor.thermostat_operating_mode.state == "Cool" %}
            AC Broke.. Turning Off.. Mode: Cool Setpoint: {{ states.sensor.thermostat_setpoint.state }}
          {% endif %}
    # Push actionable HTML5 notification to allow timely shutoff
    - service: notify.html5
      data_template:
        message: "AC Exception. Mode: {{ states.sensor.thermostat_operating_mode.state }} Setpoint: {{ states.sensor.thermostat_setpoint.state }}"
        data:
          actions:
            - action: turn_ac_off
              title: Set AC mode to off

- alias: "Notify when AC setting changes"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
    - platform: state
      entity_id: sensor.thermostat_operating_mode
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.ac_change_notification
        state: 'on'
      - condition: template
        value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    - service: notify.pushover
      data_template:
        message: >
          {% if trigger.entity_id == "sensor.thermostat_setpoint" %}Setpoint{% elif trigger.entity_id == "sensor.thermostat_mode" %}Mode{% endif %}: {{ states.sensor.thermostat_setpoint.state }}. Mode: {{ states.sensor.thermostat_operating_mode.state }}

- alias: "Garden Timer Problem"
  initial_state: 'on'
  trigger:
    - platform: time
      at: '05:30:00'
  condition:
    condition: numeric_state
    entity_id: sensor.miflora_moisture
    below: 45
  action:
    service: notify.pushover
    data_template:
      message: >
        Garden sensor reports a moisture level of {{ states.sensor.miflora_moisture.state }}%. Check hose timer. 

# Working as of 2/12/2020
# Handle all actions for html5 and android push notifications
- alias: HTML5 or Android push notification action button clicked
  trigger:
    - platform: event
      event_type: html5_notification.clicked
    - platform: event
      event_type: mobile_app_notification_action
  action:
    service_template: >-
      {% if trigger.event.data.action == "turn_ac_off" %}
        script.turn_ac_off
      {% endif %}

- alias: Ensure 100% brightness for Andrew monitor backlight
  trigger:
    platform: state
    to: 'on'
    entity_id: light.andrew_monitor_backlight
  action:
    service: scene.turn_on
    entity_id: scene.monitor_backlight_full

- alias: Clear Alexa Recording History
  trigger:
    platform: time
    at: "22:00:00"
  action:
    - service: alexa_media.clear_history

# Sync Alexa Shopping list --> Home Assistant
- alias: 'Add shopping list'
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  action:
    service_template: '{{ trigger.event.data.service }}'
    data_template:
      name: '{{ trigger.event.data.name }}'

- alias: 'Update door last opened'
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door
      to: 'on'
    - platform: state
      entity_id: binary_sensor.back_door
      to: 'on'
  action:
    service: input_datetime.set_datetime
    data_template:
      entity_id: '{% if trigger.entity_id == "binary_sensor.front_door" %}input_datetime.front_door_last{% else %}input_datetime.back_door_last{% endif %}'
      datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

# Blink a light when the panic pushover alert is acknowledged
- alias: "Panic Script Webhook Trigger"
  initial_state: 'on'
  trigger:
    platform: webhook
    webhook_id: !secret panic_script_webhook
  action:
    - service: homeassistant.toggle
      entity_id: switch.master_bathroom_light_switch
    - delay: '00:00:01'
    - service: switch.toggle
      entity_id: switch.master_bathroom_light_switch

- alias: "Pull Recipes Github Webhook"
  initial_state: 'on'
  trigger:
    platform: webhook
    webhook_id: !secret github_recipes_webhook
  action:
    - service: shell_command.pull_recipes
