#Workaround for fan speed on appdaemon dashboard
#Set value of input select when fan speed changed on switch
- alias: Set Master Bedroom Ceiling Fan Speed Selector
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: fan.master_bedroom_ceiling_fan_level
  action:
     service: input_select.select_option
     data_template:
       entity_id: input_select.master_bedroom_ceiling_fan_speed
       option: '{{ states.fan.master_bedroom_ceiling_fan_level.attributes.speed }}'

#Workaround for fan speed on appdaemon dashboard
#Set fan speed when input changed
- alias: Set Master Bedroom Ceiling Fan Speed
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_select.master_bedroom_ceiling_fan_speed
  action:
     service: fan.set_speed
     entity_id: fan.master_bedroom_ceiling_fan_level
     data_template:
       speed: '{{ states.input_select.master_bedroom_ceiling_fan_speed.state }}'

- alias: "Set dark theme for night"
  initial_state: on
  trigger:
    - platform: time
      at: '21:00:00'
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: '20:59:00'
    before: '08:59:00'
  action:
    service: frontend.set_theme
    data:
      name: midnight-remake

- alias: "Set light theme for day"
  initial_state: on
  trigger:
    - platform: time
      at: '09:00'
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: '08:59:00'
    before: '20:59:00'
  action:
    service: frontend.set_theme
    data:
        name: default

- alias: "Package Delivered"
  initial_state: on
  trigger:
    platform: state
    entity_id: sensor.deliveries_today
  action:
    - service: notify.pushover
      data_template:
        message: >
          Package delivered...

- alias: "Door Open Length"
  initial_state: on
  trigger:
    - platform: state
      to: 'on'
      entity_id: binary_sensor.front_door
      for:
        minutes: 1
    - platform: state
      to: 'on'
      entity_id: binary_sensor.back_door
      for:
        minutes: 1
  action:
    - service: notify.pushover
      data_template:
        message: >
          {% if trigger.entity_id == "binary_sensor.front_door" %}
            The front door has been opened for 1 minute..
          {% elif trigger.entity_id == "binary_sensor.back_door" %}
            The back door has been opened for 1 minute..
          {% endif %}

- alias: "Arlo Arm/Disarm"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.arlo_status
  condition:
    condition: state
    entity_id: input_boolean.security_camera_automation
    state: 'on'
  action:
    service: script.turn_on
    data_template:
      entity_id: >-
        {% if trigger.to_state.state == "on" %}
          script.arlo_arm
        {% elif trigger.to_state.state == "off" %}
          script.arlo_disarm
        {% endif %}

- alias: "House Occupied/Empty"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: group.trackers
      to: not_home
      for:
        seconds: 5
    - platform: state
      entity_id: group.trackers
      to: home
  action:
    service: script.turn_on
    data_template: 
      entity_id: >-
        {% if trigger.to_state.state == "home" %}
          script.home_occupied
        {% elif trigger.to_state.state == "not_home" %}
          script.home_empty
        {% endif %}

- alias: "Desk Button Press"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.andrew_desk_button
    to: 'on'
  action:
    service: homeassistant.toggle
    entity_id: light.bethany_desk_lamp

- alias: "Mount /Plex"
  initial_state: on
  trigger:
    platform: state
    entity_id: switch.nas
    from: 'off'
    to: 'on'
    for:
      seconds: 30
  action:
    service: shell_command.mount_plex

- alias: "Notify when AC BREAKS"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: '{{ (states.sensor.thermostat_setpoint.state | int > 70) and (states.sensor.thermostat_operating_mode.state == "Heat") }}'
      - condition: template
        value_template: '{{ (states.sensor.thermostat_setpoint.state | int < 68) and (states.sensor.thermostat_operating_mode.state == "Cool") }}'
  action:
    - service: notify.pushover
      data_template:
        message: >-
          {% if states.sensor.thermostat_operating_mode.state == "Heat" %}
            AC Broke.. Turning Off.. Mode: Heat Setpoint: {{ states.sensor.thermostat_setpoint.state }}
          {% elif states.sensor.thermostat_operating_mode.state == "Cool" %}
            AC Broke.. Turning Off.. Mode: Cool Setpoint: {{ states.sensor.thermostat_setpoint.state }}
          {% endif %}
    # Push actionable HTML5 notification to allow timely shutoff
    - service: notify.html5
      data_template:
        message: "AC Exception. Mode: {{ states.sensor.thermostat_operating_mode.state }} Setpoint: {{ states.sensor.thermostat_setpoint.state }}"
        data:
          actions:
            - action: turn_ac_off
              title: Set AC mode to off

- alias: "Notify when AC setting changes"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
    - platform: state
      entity_id: sensor.thermostat_operating_mode
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.ac_change_notification
        state: 'on'
      - condition: template
        value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    - service: notify.pushover
      data_template:
        message: >
          {% if trigger.to_state.entity_id == "sensor.thermostat_setpoint" %}
            Setpoint Trigger: {{ trigger.to_state.state }}. Mode: {{ states.sensor.thermostat_operating_mode.state }}
          {% elif trigger.to_state.entity_id == "sensor.thermostat_mode" %}
            Mode Trigger: {{ states.sensor.thermostat_setpoint.state }}. Mode: {{ trigger.to_state.state }}
          {% endif %}

- alias: "Seventeentrack Update"
  initial_state: 'on'
  trigger:
    platform: event
    event_type: state_changed
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.event.data.entity_id.startswith('sensor.seventeentrack_package_') }}"
      - condition: or
        conditions:
        - condition: template
          value_template: "{{ 'TX' in trigger.event.data.new_state.attributes.info_text }}"
        - condition: template
          value_template: "{{ 'Out for Delivery' in trigger.event.data.new_state.attributes.info_text }}"
        - condition: template
          value_template: "{{ 'Delivered' in trigger.event.data.new_state.attributes.info_text }}"
  action:
    service: notify.pushover
    data_template:
      message: >
        {{ trigger.event.data.new_state.attributes.friendly_name | replace("Seventeentrack Package: ","") }}: {{ trigger.event.data.new_state.attributes.info_text }}

- alias: "Garden Timer Problem"
  initial_state: 'on'
  trigger:
    - platform: time
      at: '05:30:00'
  condition:
    condition: numeric_state
    entity_id: sensor.miflora_moisture
    below: 70
  action:
    service: notify.pushover
    data_template:
      message: >
        Garden sensor reports a moisture level of {{ states.sensor.miflora_moisture.state }}%. Check hose timer. 

# Handle all actions for html5 notifications
- alias: HTML5 push notification action button clicked
  trigger:
    platform: event
    event_type: html5_notification.clicked
  action:
    service_template: >-
      {% if trigger.event.data.action == "turn_ac_off" %}
        script.turn_ac_off
      {% endif %}

- alias: Ensure 100% brightness for Andrew Backlight
  trigger:
    platform: state
    to: 'on'
    entity_id: light.andrew_monitor_backlight
  action:
    service: scene.turn_on
    entity_id: scene.monitor_backlight_full
