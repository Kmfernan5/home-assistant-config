sensor:
# Now defined in configuration.yaml as template
#   - platform: mqtt
#     state_topic: sensor/thermopro
#     name: "Thermopro Probe 1"
#     unit_of_measurement: "°F"
#     value_template: >
#       {% if value_json.temperature_1_F != 608.0 %}
#         {{ value_json.temperature_1_F | float | round(2) }}
#       {% else %}
#         unknown
#       {% endif %}

#   - platform: mqtt
#     state_topic: sensor/thermopro
#     name: "Thermopro Probe 2"
#     unit_of_measurement: '°F'
#     value_template: >
#       {% if value_json.temperature_2_F != 608.0 %}
#         {{ value_json.temperature_2_F | float | round(2) }}
#       {% else %}
#         unknown
#       {% endif %}

  - platform: derivative
    source: sensor.thermopro_probe_1
    unit_time: min
    time_window: "00:10:00"

  - platform: derivative
    source: sensor.thermopro_probe_2
    unit_time: min
    time_window: "00:10:00"

  - platform: template
    sensors:
      thermopro_probe_1_high_estimated_length:
        unit_of_measurement: Minutes
        value_template: "{{ '%.2f'%((states('input_number.thermopro_probe_1_set_high')|int - states('sensor.thermopro_probe_1')|int) / states('sensor.sensor_thermopro_probe_1_derivative')|float) }}"
        attribute_templates:
          timestamp: >
            {% set time = '%.2f'%((states('input_number.thermopro_probe_1_set_high')|int - states('sensor.thermopro_probe_1')|int) / states('sensor.sensor_thermopro_probe_1_derivative')|float) %}
            {{ (as_timestamp(now()) + time|float*60) | timestamp_local }}
      thermopro_probe_2_high_estimated_length:
        unit_of_measurement: Minutes
        value_template: "{{ '%.2f'%((states('input_number.thermopro_probe_2_set_high')|int - states('sensor.thermopro_probe_2')|int) / states('sensor.sensor_thermopro_probe_2_derivative')|float) }}"
        attribute_templates:
          timestamp: >
            {% set time = '%.2f'%((states('input_number.thermopro_probe_2_set_high')|int - states('sensor.thermopro_probe_2')|int) / states('sensor.sensor_thermopro_probe_2_derivative')|float) %}
            {{ (as_timestamp(now()) + time|float*60) | timestamp_local }}

template:
  - trigger:
      - platform: mqtt
        topic: "sensor/rtl_433_attic"
        payload: True
        value_template: "{{ value_json.model == 'Thermopro-TP12' }}"
    sensor:
      - name: "Thermopro Probe 1"
        state: >
          {% if trigger.payload_json.temperature_1_F != 608.0 and trigger.payload_json.temperature_1_F != "unknown" %}
            {{ trigger.payload_json.temperature_1_F | float | round(2) }}
          {% else %}
            unknown
          {% endif %}        
        unit_of_measurement: '°F'
        device_class: temperature
      - name: "Thermopro Probe 2"
        state: >
          {% if trigger.payload_json.temperature_2_F != 608.0 and trigger.payload_json.temperature_2_F != "unknown" %}
            {{ trigger.payload_json.temperature_2_F | float | round(2) }}
          {% else %}
            unknown
          {% endif %}
        unit_of_measurement: '°F'
        device_class: temperature

binary_sensor:
  - platform: template
    sensors:
      thermopro_probe_1_in_range:
        value_template: >-
          {{ (states('sensor.thermopro_probe_1')|float >= states('input_number.thermopro_probe_1_set_low')|float) and (states('sensor.thermopro_probe_1')|float <= states('input_number.thermopro_probe_1_set_high')|float) }}
      thermopro_probe_2_in_range:
        value_template: >-
          {{ (states('sensor.thermopro_probe_2')|float >= states('input_number.thermopro_probe_2_set_low')|float) and (states('sensor.thermopro_probe_2')|float <= states('input_number.thermopro_probe_2_set_high')|float) }}

input_number:
  thermopro_probe_1_set_low:
    min: -100
    max: 600
    name: Probe 1 Low
    mode: box
    unit_of_measurement: '°F'
  thermopro_probe_2_set_low:
    min: -100
    max: 600
    name: Probe 2 Low
    mode: box
    unit_of_measurement: '°F'
  thermopro_probe_1_set_high:
    min: -100
    max: 600
    name: Probe 1 High
    mode: box
    unit_of_measurement: '°F'
  thermopro_probe_2_set_high:
    min: -100
    max: 600
    name: Probe 2 High
    mode: box
    unit_of_measurement: '°F'

automation:
  - alias: Probe Temperature Alert
    id: "grill_probe_alert"
    trigger:
      - platform: state
        entity_id: binary_sensor.thermopro_probe_1_in_range
        to: 'off'
      - platform: state
        entity_id: binary_sensor.thermopro_probe_2_in_range
        to: 'off'
    action:
      - service: notify.pushover
        data:
          message: |
            {% if trigger.entity_id == 'binary_sensor.thermopro_probe_1_in_range' %}
            Probe 1 out of range: {{ states('sensor.thermopro_probe_1') }}
            Low Set: {{ states('input_number.thermopro_probe_1_set_low') }}
            High Set: {{ states('input_number.thermopro_probe_1_set_high') }}
            {% elif trigger.entity_id == 'binary_sensor.thermopro_probe_2_in_range' %}
            Probe 2 out of range: {{ states('sensor.thermopro_probe_2') }}
            Low Set: {{ states('input_number.thermopro_probe_2_set_low') }}
            High Set: {{ states('input_number.thermopro_probe_2_set_high') }}
            {% endif %}
          data:
            priority: 2
            expire: 3600
            retry: 30
      # Only fire 1 time per minute
      - delay: 60

  - alias: Hopper Level Alert
    id: "grill_hopper_alert"
    trigger:
      - platform: numeric_state
        entity_id: sensor.traeger_hopper_level
        below: 2
    condition: "{{ as_timestamp(now()) - as_timestamp(state_attr('automation.hopper_level_alert.attributes','last_triggered')) | int > 600 }}"
    action: 
      - service: notify.pushover
        data:
          message: "Traeger Hopper level too low!! ({{ states('sensor.traeger_hopper_level') }}%)"
          data:
            priority: 2
            expire: 3600
            retry: 30
      # Only fire 1 time per 10 minutes
      - delay: 600 

  # Clear out temperatures if not updated for 30 seconds
  - alias: Probe Temperature Clear
    id: probe_temperature_clear
    mode: restart
    trigger:
      - platform: mqtt
        topic: sensor/rtl_433
        value_template: "{{ value_json.model == 'Thermopro-TP12' and value_json.temperature_1_F != 'unknown' and value_json.temperature_2_F != 'unknown' }}"
        payload: True
    action:
      - delay: 20
      - service: mqtt.publish
        data:
          topic: sensor/rtl_433
          payload: >-
            {"time":"2022-02-17
            02:26:13","model":"Thermopro-TP12","id":77,"temperature_1_F":"unknown","temperature_2_F":"unknown","mic":"CRC"}
