# UPS monitoring via docker and https://github.com/DanielWinks/pwrstat_docker

# 650: NUC, AP, Modem, Switch
# 950: NAS, Firewall

#apcusd_950
apcupsd:
 port: 3551

#apcusd_650
apcupsd2:
  port: 3552

sensor:
  - platform: apcupsd
    resources:
      - loadpct
      - bcharge
      - timeleft
      - status

  - platform: apcupsd2
    resources:
      - loadpct
      - bcharge
      - timeleft
      - status

automation:
  - alias: "UPS Alert"
    id: "ups_alert"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        from: 'ONLINE'
      - platform: state
        entity_id: sensor.650_ups_status
        from: 'ONLINE'
    action:
      - service: notify.pushover
        data:
          message: "{{ trigger.to_state.attributes.friendly_name }} {{ trigger.to_state.state }}: {{ now().strftime('%Y-%m-%d %T') }}"

  - alias: "UPS Recovery"
    id: "ups_recovery"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        to: 'ONLINE'
      - platform: state
        entity_id: sensor.650_ups_status
        to: 'ONLINE'
    action:
      - service: notify.pushover
        data:
          message: > 
            {% if trigger.from_state.state == "ONBATT" %}
              {{ trigger.to_state.attributes.friendly_name }} {{ trigger.to_state.state }}: {{ now().strftime('%Y-%m-%d %T') }}. Outaged lasted {{ relative_time(trigger.from_state.last_changed) }}
            {% else %}
              {{ trigger.to_state.attributes.friendly_name }} {{ trigger.to_state.state }}: {{ now().strftime('%Y-%m-%d %T') }}
            {% endif %}

  - alias: "Turn Off NAS After 10 Minute Outage"
    id: "nas_off_ups_outage"
    trigger:
      platform: state
      entity_id: sensor.ups_status
      to: "ONBATT"
      for:
        minutes: 10
    condition:
      condition: state
      entity_id: switch.nas
      state: 'on'
    action:
      - service: notify.pushover
        data:
          message: "{{ trigger.to_state.attributes.friendly_name }} battery at {{ states('sensor.ups_battery') }}%. Initiaiting NAS shutdown."
      - service: switch.turn_off
        entity_id: switch.nas

  - alias: "Containers Off With Outage"
    id: "containers_off_ups_outage"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        from: "ONLINE"
        to: "ONBATT"
        for:
          seconds: 30
    action:
      - service: homeassistant.turn_off
        entity_id: 
          - switch.docker_zwavejs
          - switch.docker_vscode
          - switch.docker_thermostat_api_server
          - switch.docker_esphome
          - switch.docker_grafana

  - alias: "Containers On With Restore"
    id: "containers_on_ups_restore"
    trigger:
      - platform: state
        entity_id: sensor.ups_status
        from: "ONBATT"
        to: "ONLINE"
        for:
          seconds: 30
    action:
      - service: homeassistant.turn_on
        entity_id: 
          - switch.docker_zwavejs
          - switch.docker_vscode
          - switch.docker_thermostat_api_server
          - switch.docker_nodered
          - switch.docker_appdaemon

  - alias: "Turn Off NUC When <10 Minutes Remain"
    id: "nuc_off_ups_critical"
    trigger:
      platform: numeric_state
      entity_id: sensor.ups_time_left
      below: 10
    condition:
      - condition: state
        entity_id: sensor.ups_status
        state: "ONBATT"
    action:
      - service: notify.pushover
        data:
          message: "{{ trigger.to_state.attributes.friendly_name }} battery at {{ states('sensor.ups_battery') }}%. Issued NUC shutdown 2 minutes from now. Cancel with sudo shutdown -c"
      - service: shell_command.nuc_poweroff

homeassistant:
  customize:
    sensor.ups_battery:
      friendly_name: 950 UPS Battery
    sensor.ups_load:
      friendly_name: 950 UPS Load
    sensor.ups_status:
      friendly_name: 950 UPS Status
    sensor.ups_time_left:
      friendly_name: 950 UPS Time Left
