- alias: "Update README"
  id: "update_Readme"
  initial_state: on
  trigger:
    - platform: time
      at: "11:00:00"
    - platform: time
      at: "21:00:00"
    - platform: homeassistant
      event: start
  action:
    - delay: "00:05:00"
    - service: readme.generate

- alias: "Set dark theme for night"
  id: "dark_theme"
  initial_state: on
  trigger:
    - platform: time
      at: "21:00:00"
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: "20:59:00"
    before: "08:59:00"
  action:
    - service: frontend.set_theme
      data:
        name: "Google Dark Theme"

- alias: "Set light theme for day"
  id: "light_theme"
  initial_state: on
  trigger:
    - platform: time
      at: "08:00:00"
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: "07:59:00"
    before: "20:59:00"
  action:
    service: frontend.set_theme
    data:
      name: default

- alias: "Security Arm/Disarm"
  id: "arm_disarm"
  initial_state: on
  trigger:
    platform: state
    entity_id: input_boolean.security_status
  action:
    - service: script.turn_on
      data:
        entity_id: >
          {% if trigger.to_state.state == 'on' %}
            script.security_arm
          {% elif trigger.to_state.state == 'off' %}
            script.security_disarm
          {% endif %}

- alias: "House Occupied/Empty"
  id: "occupied_empty"
  initial_state: on
  trigger:
    - platform: state
      entity_id: group.trackers
      to: not_home
      for:
        minutes: 1
    - platform: state
      entity_id: group.trackers
      to: home
  condition:
    condition: state
    entity_id: input_boolean.guest_mode
    state: "off"
  action:
    - service: script.turn_on
      data:
        entity_id: >
          {% if trigger.to_state.state == 'home' %}
            script.home_occupied
          {% elif trigger.to_state.state == 'not_home' %}
            script.home_empty
          {% endif %}
    # Prevent trigger for 2 minutes
    - delay: "00:02:00"

- alias: "Andrew Desk Button"
  id: "desk_button"
  initial_state: on
  trigger:
    platform: state
    to: "on"
    entity_id:
      - binary_sensor.andrew_desk_button_single
      - binary_sensor.andrew_desk_button_double
  action:
    service: homeassistant.toggle
    data:
      entity_id: >
        {% if 'single' in trigger.entity_id %}
          switch.office_heater
        {% elif 'double' in trigger.entity_id %}
          fan.office_ceiling_fan
        {% endif %}

- alias: "Mount/Umount /Plex"
  id: "mount_unmount_plex"
  initial_state: on
  trigger:
    - platform: state
      entity_id: switch.nas
      from: "off"
      to: "on"
      for:
        seconds: 30
    - platform: state
      entity_id: switch.nas
      from: "on"
      to: "off"
      for:
        seconds: 30
  action:
    service: >
      {% if trigger.to_state.state == 'on' %}
        shell_command.mount_plex
      {% elif trigger.to_state.state == 'off' %}
        shell_command.umount_plex
      {% endif %}

- alias: "Notify when AC Offline"
  id: "notify_ac_offline"
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.thermostat_online
      to: "off"
      for: "00:30:00"
  action:
    - service: script.notify_wrapper
      data:
        message: "The thermostat appears to be offline..."

# - alias: "Notify when Verizon Extender Offline"
#   id: "notify_verizon_extender_offline"
#   initial_state: on
#   trigger:
#     - platform: state
#       entity_id: sensor.verizon_network_extender_status
#       from: "In Service"
#   action:
#     - service: notify.signal_self
#       data:
#         message: "The Verizon extender appears to be out of service..."

- alias: "Notify AC Equipment Event Occurs"
  id: "notify_ac_equipment_event"
  initial_state: on
  trigger:
    - platform: state
      entity_id: sensor.thermostat_latest_equipment_event
  condition: "{{ trigger.to_state.state not in [ 'unavailable', '' ] and trigger.from_state.state not in [ 'unavailable', '' ] }}"
  action:
    - service: script.notify_wrapper
      data:
        message: "AC Equipment Event: {{ trigger.to_state.state }}"

- alias: "Notify when AC setting changes"
  id: "ac_notify_change"
  initial_state: on
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
    - platform: state
      entity_id: sensor.thermostat_operating_mode
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.ac_change_notification
        state: "on"
      - "{{ trigger.from_state.state != trigger.to_state.state }}"
  action:
    - service: script.notify_wrapper
      data:
        message: "{% if trigger.entity_id == 'sensor.thermostat_setpoint' %}Setpoint{% elif trigger.entity_id == 'sensor.thermostat_mode' %}Mode{% endif %}: {{ states('sensor.thermostat_setpoint') }}. Mode: {{ states('sensor.thermostat_operating_mode') }}"

# Working as of 2/12/2020
# Handle all actions for html5 and android push notifications
- alias: HTML5 or Android push notification action button clicked
  id: "html5_android_push"
  trigger:
    - platform: event
      event_type: html5_notification.clicked
    - platform: event
      event_type: mobile_app_notification_action
  action:
    service: >
      {% if trigger.event.data.action == 'turn_ac_off' %}
        script.turn_ac_off
      {% endif %}

- alias: Clear Alexa Recording History
  id: "alexa_history"
  trigger:
    platform: time_pattern
    hours: "/12"
  action:
    - service: alexa_media.clear_history

- alias: "Update 'Last' Datetimes"
  id: "update_last_datetimes"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.front_door
        - binary_sensor.back_porch_door
        - binary_sensor.garage_exterior_door
        - binary_sensor.garage_interior_door
        - binary_sensor.master_bedroom_exterior_door
        - binary_sensor.garage_motion # Camera Based
        - input_boolean.kitchen_motion
        - binary_sensor.living_room_motion
        - binary_sensor.hallway_motion
      from: "off"
      to: "on"
  action:
    service: input_datetime.set_datetime
    data:
      entity_id: "input_datetime.{{trigger.entity_id | regex_replace(find='binary_sensor.', replace='') | regex_replace(find='input_boolean.', replace='') | regex_replace(find='sensor.', replace='') }}_last"
      datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

# - alias: "Mailbox Alert"
#   id: "mailbox_alert"
#   initial_state: on
#   trigger:
#     platform: state
#     entity_id:
#       - sensor.433_mailbox_last_opened
#   condition: "{{ states('sensor.mail_usps_packages') > 0 }}"
#   action:
#     # Force capture of clip
#     - service: switch.turn_on
#       entity_id: switch.garage_stream
#     #- service: notify.pushover
#     - service: notify.signal_self
#       data:
#         message: >
#           Mailbox Opened!
#     - delay: 10
#     - service: switch.turn_off
# entity_id: switch.garage_stream

- alias: "Door Lock Alerts"
  id: "door_lock_alerts"
  initial_state: on
  trigger:
    platform: state
    entity_id:
      - lock.front_door
      - lock.garage_exterior_door
    to: "unlocked"
  condition: "{{ states('input_boolean.security_status') == 'on'}}"
  action:
    - service: script.notify_wrapper
      data:
        message: "{{ trigger.to_state.name }} Unlocked"
        data:
          priority: 1

# Blink a light when the panic pushover alert is acknowledged
- alias: "Panic Script Webhook Trigger"
  id: "panic_script_webhook"
  initial_state: on
  trigger:
    platform: webhook
    webhook_id: !secret panic_script_webhook
    local_only: false
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.master
        volume_level: 0.3
    - service: notify.alexa_media_master
      data:
        data:
          type: tts
        message: "Help is on the way"

- alias: "Cellular Modem Power Toggle"
  id: "cellular_modem_power_toggle"
  mode: single
  initial_state: on
  trigger:
    - platform: webhook
      webhook_id: !secret cellular_modem_power_toggle_webhook
      local_only: false
    - platform: state
      entity_id: sensor.cellular_modem_power
      from: "on"
      to: "off"
  action:
    - service: esphome.cellular_modem_power_toggle

- alias: "Pull Recipes Github Webhook"
  id: "recipes_github_pull"
  initial_state: on
  trigger:
    platform: webhook
    webhook_id: !secret github_recipes_webhook
    local_only: false
  action:
    - service: shell_command.pull_recipes

- alias: "Power off NAS after backup"
  id: "nas_poweroff_post_backup"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.backups_complete
    to: "on"
  condition:
    condition: time
    after: "03:00:00"
    before: "05:00:00"
    weekday:
      - wed
  action:
    service: homeassistant.turn_off
    entity_id:
      - switch.nas
      - binary_sensor.backups_complete

- alias: "Turn on office speakers when spotify begins playing including this source"
  id: "office_speakers_spotify"
  initial_state: on
  trigger:
    - platform: state
      entity_id: media_player.spotify
      attribute: source
      to: "Office"
    - platform: state
      entity_id: media_player.spotify
      attribute: source
      to: "Everywhere"
    - platform: state
      entity_id: media_player.spotify
      to: "playing"
  condition: "{{ states('media_player.spotify') == 'playing' and states('switch.andrew_office_speakers') == 'off' and state_attr('media_player.spotify', 'source') in ['Everywhere', 'Office'] }}"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.andrew_office_speakers

- alias: "Turn on speakers and tv when XBOX powers on"
  id: "speakers_with_xbox"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.xbox_power
    to: "on"
  condition: "{{ states('input_boolean.goodnight') == 'off' and states('group.trackers') == 'home' }}"
  action:
    service: homeassistant.turn_on
    entity_id:
      - switch.living_room_speakers
      - switch.tv

- alias: "Turn off speakers when tv OR xbox powers off"
  id: "tv_off_with_xbox_off"
  initial_state: on
  trigger:
    - platform: state
      entity_id: switch.tv
      to: "off"
    - platform: state
      entity_id: binary_sensor.xbox_power
      to: "off"
  condition: "{{ states('input_boolean.goodnight') == 'off' and states('group.trackers') == 'home' }}"
  action:
    service: homeassistant.turn_off
    entity_id:
      - switch.living_room_speakers
      - switch.tv

# Monitor follows via appdaemon
- alias: "Desk Lamp on when MacBook Active"
  id: "desk_lamp_macbook_active"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.weasel_active
    to: "on"
  # condition: "{{ states('sensor.weasel_ssid') == 'Penny' }}"
  condition: "{{ states('person.andrew') == 'home' }}"
  action:
    - if: "{{ states('sun.sun') == 'below_horizon' or (states('cover.office_blind_left') == 'closed' and states('cover.office_blind_right') == 'closed') }}"
      then:
        - service: homeassistant.turn_on
          entity_id: light.andrew_desk_lamp
    - service: homeassistant.turn_on
      entity_id: switch.andrew_monitor

- alias: "Desk Lamp off when MacBook Inactive"
  id: "desk_lamp_macbook_inactive"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.weasel_active
    to: "off"
    for: "00:30:00"
  # condition: "{{ states('sensor.weasel_ssid') == 'Penny'}}"
  action:
    - service: homeassistant.turn_off
      entity_id: light.andrew_desk_lamp
    - service: homeassistant.turn_off
      entity_id: switch.andrew_monitor

- alias: "Nexus off After Monitor"
  id: "nexus_7_off_after_monitor"
  initial_state: on
  trigger:
    platform: state
    entity_id: switch.andrew_monitor
    to: "off"
    for: "00:00:30"
  action:
    - service: homeassistant.turn_off
      entity_id: switch.nexus_7_screen

- alias: "Water Sensor Alerts"
  id: "water_sensor_alert"
  trigger:
    - platform: state
      id: non_esphome
      entity_id:
        - binary_sensor.guest_bathroom_toilet_water_detector
        - binary_sensor.back_bathroom_toilet_water_detector
        - binary_sensor.kitchen_sink_water_detector
        - binary_sensor.master_bathroom_water_detector
        - binary_sensor.water_shutoff_water_leak_detected
      to: "on"
    - platform: state
      id: esphome
      entity_id:
        - binary_sensor.laundry_room_water_detector
        - binary_sensor.water_heater_water_detector
        - binary_sensor.kitchen_water_detector
      to: "on"
  action:
    - if: "{{ trigger.id == 'non_esphome' }}"
      then:
        - service: switch.turn_on
          entity_id: switch.water_shutoff
    - service: script.notify_wrapper
      data:
        message: "Water detected by {{ trigger.to_state.name }}. {% if trigger.id == 'non_esphome' %}Shutting off water!{% endif %}"
        data:
          priority: 2
    # - service: notify.alexa_media
    #   data:
    #     message: "Water detected by {{ trigger.to_state.name }}. {% if trigger.id == 'non_esphome' %}Shutting off water!{% endif %}"
    #     data:
    #       method: all
    #       type: announce
    #     target: ["Office", "Kitchen", "Master", "Living Room"]

- alias: "Master Closet Light with Motion"
  id: "closet_motion_light"
  trigger:
    - platform: state
      entity_id: "binary_sensor.master_closet_motion_sensor"
      to: "on"
  mode: restart
  action:
    - service: homeassistant.turn_on
      entity_id: switch.master_closet_light
    - delay: "00:05:00"
    - service: homeassistant.turn_off
      entity_id: switch.master_closet_light

- alias: "Sensor Battery Alerts"
  id: "sensor_battery_alert"
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.1_battery_level
        - sensor.2_battery_level
        - sensor.3_battery_level
        - sensor.back_bedroom_remote_battery_level
        - sensor.front_door_battery
        - sensor.back_door_battery
        - sensor.garage_exterior_door_battery_level
        - sensor.back_bathroom_toilet_water_detector_battery_level
        - sensor.guest_bathroom_toilet_water_detector_battery_level
        - sensor.master_bathroom_water_detector_battery_level
        - sensor.washing_machine_water_detector_battery_level
        - sensor.kitchen_sink_water_detector_battery_level
        - sensor.motion_1_battery_level
        - sensor.living_room_motion_battery_level
        - sensor.office_blind_left_battery
        - sensor.office_blind_right_battery
        - sensor.guest_bedroom_blind_left_battery
        - sensor.guest_bedroom_blind_right_battery
        - sensor.hallway_motion_battery
        - sensor.master_closet_motion_battery_level
        - sensor.netatmo_home_attic_battery_percent
        - sensor.fridge_water_detector_battery_level
      below: 10
  action:
    - service: script.notify_wrapper
      data:
        message: "{{ trigger.to_state.name }} battery level at {{ trigger.to_state.state }}%"

- alias: "Update CloudFlare Firewall Rule"
  id: "update_cloudflare_firewall_rule"
  trigger:
    - platform: state
      entity_id: sensor.myip
  condition: '{{ trigger.to_state.state not in ["unknown","unavailable"] }}'
  action:
    - service: shell_command.update_cloudflare_firewall
      data:
        old: "{{ trigger.from_state.state }}"
        new: "{{ trigger.to_state.state }}"
    # - service: notify.signal_self
    #   data:
    #     message: >
    #       Cloudflare Firewall Updated {{ trigger.from_state.state }} --> {{ trigger.to_state.state }}

- alias: "Sync Cloudflare CNAME Records"
  id: "sync_cloudflare_cnames"
  trigger:
    platform: event
    event_type: folder_watcher
    event_data:
      event_type: modified
  action:
    - service: shell_command.sync_cloudflare_records

- alias: "Compost Turn Reset"
  id: "compost_turn_reset"
  trigger:
    - platform: state
      entity_id: input_boolean.compost_turn
      to: "on"
  action:
    - delay: "00:01:00"
    - service: homeassistant.turn_off
      entity_id: input_boolean.compost_turn

- alias: "Internet Reachability GSM Alert"
  id: "internet_gsm_alert"
  trigger:
    - platform: state
      entity_id: binary_sensor.internet_reachability
      from: "on"
      to: "off"
    - platform: state
      entity_id: binary_sensor.internet_reachability
      from: "off"
      to: "on"
  action:
    - service: notify.cellular_message
      data:
        message: >
          {% if trigger.from_state.state == "on" %}
          Home internet is down
          {% else %}
          Home internet has recovered
          {% endif %}
        data:
          # Override DND if Daytime, otherwise silent
          priority: "{% if now().hour > 9 and now().hour < 22 %}1{% else %}0{% endif %}"

# - id: webhook_debugger
#   alias: "Webhook Debugger"
#   trigger:
#     - platform: webhook
#       webhook_id: hihihi
#   action:
#     - service: persistent_notification.create
#       data:
#         message: >-
#           {% if 'data' in trigger %}
#             Data: {{ dict(trigger.data)|tojson }}
#           {% elif 'json' in trigger %}
#             JSON: {{ dict(trigger.json)|tojson }}
#           {% else %}
#           {% endif %}
#           {% if 'query' in trigger and trigger.query|length > 0 %}
#             Query: {{ dict(trigger.query)|tojson }}
#           {% endif %}

- alias: "Watchtower Updates"
  id: "watchertower_run_update"
  trigger:
    - platform: time
      at: "15:00:00"
    - platform: time
      at: "20:00:00"
  condition:
    condition: and
    conditions:
      - condition: time
        weekday:
          - sun
      - "{{ states('person.andrew') == 'home'}}"
  action:
    # Watchtower runs once at container start then turns back off
    - service: homeassistant.turn_on
      entity_id: switch.docker_watchtower

- alias: "Update Utilities Cost"
  id: "update_utilities_cost"
  mode: parallel
  trigger:
    - platform: state
      entity_id:
        - sensor.electric_utilities_summary
        - sensor.electric_utilities_daily
        - sensor.electric_utilities_realtime
    - platform: homeassistant
      event: start
  action:
    - service: python_script.add_elecrtric_cost_attribute
      data:
        entity_id: sensor.electric_utilities_summary
    - service: python_script.add_elecrtric_cost_attribute
      data:
        entity_id: sensor.electric_utilities_daily
    - service: python_script.add_elecrtric_cost_attribute
      data:
        entity_id: sensor.electric_utilities_realtime

- alias: "Update USPS Mail Camera Path on Hass Restart"
  id: "usps_mail_path_update"
  trigger:
    - platform: state
      entity_id: sensor.mail_updated
    - platform: homeassistant
      event: start
  action:
    - service: local_file.update_file_path
      data_template:
        entity_id: camera.mail_usps
        file_path: "{{ states('sensor.mail_image_system_path') }}"

# - alias: "Fingerprint Safe Open"
#   id: "fingerprint_safe"
#   trigger:
#     platform: state
#     entity_id: sensor.fingerprint_state
#     to: "Authorized finger"
#   condition: "{{ states('sensor.fingerprint_last_finger_id') in ['1','2'] }}"
#   action:
#     - service: homeassistant.turn_on
#       entity_id: switch.safe
#     #- service: notify.pushover
#     - service: notify.signal_self
#       data:
#         message: "Safe opened by {% if states('sensor.fingerprint_last_finger_id') == '1' %}Andrew right index{% elif states('sensor.fingerprint_last_finger_id') == '2' %}Andrew left index{% endif %}!"
#         # data:
#         #   priority: 2
#         #   expire: 3600
#         #   retry: 30

- alias: "Fingerprint Door Unlock"
  id: "fingerprint_door_unlock"
  trigger:
    platform: state
    entity_id: sensor.fingerprint_state
    to: "Authorized finger"
  condition: "{{ states('sensor.fingerprint_last_finger_id') in ['1','2'] }}"
  action:
    - service: lock.unlock
      entity_id: lock.back_door
    - service: script.notify_wrapper
      data:
        message: "Front door unlocked by {% if states('sensor.fingerprint_last_finger_id') == '1' %}Andrew right index{% elif states('sensor.fingerprint_last_finger_id') == '2' %}Andrew left index{% else %}Unknown{% endif %}!"

- alias: "Sync Alexa Timers"
  id: "sync_alexa_timers"
  trigger:
    - platform: state
      entity_id: sensor.kitchen_next_timer
      to: "active"
  action:
    - service: '{% if trigger.to_state.state == "unavailable" %}timer.cancel{% else %}timer.start{% endif %}'
      data:
        duration: '{{ as_timestamp(states("sensor.kitchen_next_timer")) - as_timestamp(now()) }}'
        entity_id: timer.kitchen_alexa

- alias: "315Mhz Remote"
  id: "315mhz_remote"
  trigger:
    - platform: mqtt
      topic: "sensor/rtl_433_test"
      value_template: "{{ value_json.model }}"
      payload: "Smoke-GS558"
  action:
    service: >
      {% if trigger.payload_json.code == "87f7b0" %}
        homeassistant.turn_on
      {% elif trigger.payload_json.code == "67f7b0" %}
        homeassistant.turn_off
      {% endif %}
    entity_id: group.christmas_trees

# - alias: "Covid Booking"
#   id: "covid_booking"
#   trigger:
#     - platform: time
#       at: "12:00:00"
#   condition:
#     condition: time
#     weekday:
#       - mon
#   action:
#     - service: shell_command.covid_booking

- alias: "Signal Webhook Message BVST"
  id: "signal_webhook_message_bvst"
  mode: "queued"
  initial_state: on
  trigger:
    - platform: webhook
      webhook_id: !secret signal_bvst_contact_webhook_id
      id: contact
      local_only: false
    # - platform: webhook
    #   webhook_id: !secret signal_bvst_intake_webhook_id
    #   id: intake_forms
    #   local_only: false
    - platform: webhook
      webhook_id: !secret signal_bvst_insurance_webhook_id
      id: insurance
      local_only: false
  action:
    - if: "{{ trigger.id == 'contact' }}"
      then:
        - service: notify.signal_bvst
          data:
            message: "{{ trigger.json['message'] }}"
    # - if: "{{ trigger.id == 'intake_forms' }}"
    #   then:
    #     - service: notify.signal_self
    #       data:
    #         message: "Intake forms sent to {{ trigger.json['email'] }}"
    - if: "{{ trigger.id == 'insurance' }}"
      then:
        - service: notify.signal_bvst_ins
          data:
            message: "{{ trigger.json['message'] }}"

# - alias: "Restart AppDaemon"
#   id: "restart_appdaemon"
#   trigger:
#     platform: time
#     at: "01:30:00"
#   action:
#     - service: switch.turn_off
#       entity_id: switch.docker_appdaemon
#     - delay: "00:00:30"
#     - service: switch.turn_on
#       entity_id: switch.docker_appdaemon

- alias: "Deep Freeze Temperature"
  id: "deep_freeze_temperature"
  initial_state: on
  trigger:
    platform: numeric_state
    entity_id:
      - sensor.deep_freeze_temperature
    above: 25
    for:
      minutes: 10
  action:
    - service: script.notify_wrapper
      data:
        message: "The deep freeze has been above 25°F for 10 minutes and is currently {{ trigger.to_state.state }}°F"
        data:
          priority: 2

- alias: "Garage Fan"
  id: "garage_fan"
  initial_state: on
  trigger:
    platform: state
    entity_id: cover.garage_door
    to:
      - "open"
      - "closed"
  action:
    - service: >
        {% if trigger.from_state.state == "closed" and trigger.to_state.state == "open" %}
          switch.turn_on
        {% elif trigger.from_state.state == "open" and trigger.to_state.state == "closed" %}
          switch.turn_off
        {% endif %}
      entity_id: switch.garage_fan

# - alias: "Tunnel Notifications"
#   id: "tunnel_notifications"
#   initial_state: on
#   trigger:
#     - platform: state
#       entity_id:
#         - binary_sensor.kurt_tunnel
#       from: "off"
#       to: "on"
#     - platform: state
#       entity_id:
#         - binary_sensor.kurt_tunnel
#       from: "on"
#       to: "off"
#   action:
#     - service: script.notify_wrapper
#       data:
#         message: >
#             The tunnel "{{ trigger.to_state.attributes.friendly_name }}" is {% if trigger.to_state.state == "off" %}offline{% elif trigger.to_state.state == "on" %}online{% endif %}

- alias: "Door Chime"
  id: "door_chime"
  initial_state: on
  trigger:
    - platform: state
      entity_id:
        - cover.garage_door
      from: "closed"
      to: "open"
  condition: "{{ states('group.trackers') == 'home'}}"
  action:
    - service: notify.alexa_media_kitchen
      data:
        data:
          type: tts
          method: speak
        # https://developer.amazon.com/en-US/docs/alexa/custom-skills/ask-soundlibrary.html
        message: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/bell_02"/>

- alias: "Startup Notificiation"
  id: "startup_notification"
  initial_state: on
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: notify.signal_self
      data:
        message: >
          Home Assistant v{{ states('sensor.ha_version')}} has started!

- alias: "Coffee Maker on With Alarm Clock"
  id: "coffee_maker_alarm_clock"
  initial_state: on
  trigger:
    # Andrew Phone Alarm Clock
    - platform: state
      entity_id: sensor.andrew_phone_last_notification
      attribute: channel_id
      to: Firing
  condition:
    condition: and
    conditions:
      - "{{ states('binary_sensor.workday_sensor') == 'on' }}"
      - "{{ states('person.andrew') == 'home' }}"
      - condition: time
        after: "05:30:00"
        before: "09:45:00"
      - "{{ states('sensor.andrew_phone_charger_type') != 'none' }}"
  action:
    - wait_template: "{{ is_state('sensor.andrew_phone_charger_type', 'none') }}"
      timeout: "00:05:00"
    - service: switch.turn_on
      entity_id: switch.coffee_maker
    - service: switch.turn_on
      entity_id: switch.under_cabinet_lights_coffee
    - wait_template: "{{ is_state('switch.under_cabinet_lights_coffee', 'off') }}"
      timeout: "00:20:00"
    - if:
        - "{{ wait.completed }}"
      then:
        - service: switch.turn_off
          entity_id: switch.coffee_maker

- alias: "Coffee Maker Off"
  id: "coffee_maker_off"
  initial_state: on
  trigger:
    - platform: time
      at: "10:00:00"
    # also auto turns off after 30 minutes via ESPhome
    # switch config of power_plug_1
  condition: "{{ states('switch.coffee_maker') == 'on' }}"
  action:
    - service: switch.turn_off
      entity_id: switch.coffee_maker
    - service: notify.signal_self
      data:
        message: >
          Turned coffee maker off!

- alias: "Water Shutoff Alert"
  id: "water_shutoff_alert"
  initial_state: on
  trigger:
    - platform: state
      entity_id: switch.water_shutoff
      to: "on"
  action:
    - service: script.notify_wrapper
      data:
        message: Water supply has been shut off!
        data:
          priority: 1

- alias: "Front Door NFC"
  id: "front_door_nfc"
  initial_state: on
  trigger:
    - platform: state
      entity_id: sensor.rfid_tag
  condition: '{{ "08" in trigger.to_state.state[:-2] }}'
  action:
    - service: script.notify_wrapper
      data:
        message: "Front door unlocked by NFC"
        data:
          priority: 1
    - service: lock.unlock
      entity_id: lock.front_door

- alias: "Turn off AC Fan"
  # In case I manually turned on the fan to clear stale air
  id: "turn_off_ac_fan"
  trigger:
    - platform: state
      entity_id: sensor.thermostat_state
      to: "Idle Fan"
      for:
        minutes: 30
  action:
    - service: script.notify_wrapper
      data:
        message: "AC fan on idle for 30 minutes, setting back to auto"
    - service: climate.set_fan_mode
      entity_id: climate.thermostat
      data:
        fan_mode: auto

- alias: "Plant Light Corner Brightness"
  id: "plant_corner_brightness"
  trigger:
    - platform: state
      entity_id: light.plant_light_corner
      from: "off"
      to: "on"
  action:
    - repeat:
        count: 3
        sequence:
          - service: light.turn_on
            entity_id: light.plant_light_corner
            data:
              brightness: 255
          - delay: "00:00:05"

- alias: "Rain Notifications"
  id: rain_notifications
  mode: "single"
  trigger:
    - platform: state
      entity_id: sensor.neighbor_5in1_rain_last_1_hour
      from:
        - "unknown"
        - "unavailable"
    - platform: numeric_state
      entity_id: sensor.neighbor_5in1_rain_last_1_hour
      above: 0.00
      below: 0.03
  action:
    - if:
        # Ensure new state is a float > 0.00
        - "{{ float(trigger.to_state.state, default=-1) > 0.00 }}"
      then:
        - service: notify.signal_self
          data:
            message: >
              Rain started!
    - delay: 300

- alias: "Lower and Raise Blinds"
  id: "lower_raise_blinds"
  trigger:
    - platform: time
      at: "10:30:00"
      id: morning
    - platform: time
      at: "21:00:00"
      id: night
  action:
    - choose:
        - conditions: "{{ trigger.id == 'night' }}"
          #- conditions: "{{ states('group.trackers') == 'home' and trigger.id == 'night' }}"
          alias: Close Blinds
          sequence:
            - service: cover.close_cover
              target:
                entity_id:
                  - cover.office_blind_left
                  - cover.office_blind_right
                  - cover.guest_bedroom_blinds
        - conditions: "{{ trigger.id == 'morning' }}"
          alias: Open Blinds
          sequence:
            - service: cover.open_cover
              target:
                entity_id:
                  - cover.office_blind_left
                  - cover.office_blind_right
            # Only open blinds if guest mode is OFF
            - if: "{{ states('input_boolean.guest_mode') == 'off' }}"
              then:
                - service: cover.open_cover
                  target:
                    entity_id:
                      - cover.guest_bedroom_blinds
