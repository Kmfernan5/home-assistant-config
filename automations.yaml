- alias: "Update README"
  id: "update_Readme"
  initial_state: on
  trigger:
    - platform: time
      at: "11:00:00"
    - platform: time
      at: "21:00:00"
    - platform: homeassistant
      event: start
  action:
    - delay: "00:05:00"
    - service: readme.generate

- alias: "Set dark theme for night"
  id: "dark_theme"
  initial_state: on
  trigger:
    - platform: time
      at: "21:00:00"
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: "20:59:00"
    before: "08:59:00"
  action:
    - service: frontend.set_theme
      data:
        name: "Google Dark Theme"

- alias: "Set light theme for day"
  id: "light_theme"
  initial_state: on
  trigger:
    - platform: time
      at: "08:00:00"
    - platform: homeassistant
      event: start
  condition:
    condition: time
    after: "07:59:00"
    before: "20:59:00"
  action:
    service: frontend.set_theme
    data:
        name: default

- alias: "Security Arm/Disarm"
  id: "arm_disarm"
  initial_state: on
  trigger:
    platform: state
    entity_id: input_boolean.security_status
  action:
    - service: script.turn_on
      data:
        entity_id: >
          {% if trigger.to_state.state == 'on' %}
            script.security_arm
          {% elif trigger.to_state.state == 'off' %}
            script.security_disarm
          {% endif %}

- alias: "House Occupied/Empty"
  id: "occupied_empty"
  initial_state: on
  trigger:
    - platform: state
      entity_id: group.trackers
      to: not_home
      for:
        seconds: 5
    - platform: state
      entity_id: group.trackers
      to: home
  condition:
    condition: state
    entity_id: input_boolean.guest_mode
    state: "off"
  action:
    - service: script.turn_on
      data: 
        entity_id: >
          {% if trigger.to_state.state == 'home' %}
            script.home_occupied
          {% elif trigger.to_state.state == 'not_home' %}
            script.home_empty
          {% endif %}
    # Prevent trigger for 2 minutes
    - delay: "00:02:00"

- alias: "Andrew Desk Button"
  id: "desk_button"
  initial_state: on
  trigger:
    platform: state
    to: "on"
    entity_id: 
      - binary_sensor.andrew_desk_button_single
      - binary_sensor.andrew_desk_button_double
  action:
    service: homeassistant.toggle
    data: 
      entity_id: >
        {% if 'single' in trigger.entity_id %}
          switch.office_heater
        {% elif 'double' in trigger.entity_id %}
          fan.office_ceiling_fan
        {% endif %}

- alias: "Mount/Umount /Plex"
  id: "mount_unmount_plex"
  initial_state: on
  trigger:
    - platform: state
      entity_id: switch.nas
      from: "off"
      to: "on"
      for:
        seconds: 30
    - platform: state
      entity_id: switch.nas
      from: "on"
      to: "off"
      for:
        seconds: 30
  action:
    service: >
      {% if trigger.to_state.state == 'on' %}
        shell_command.mount_plex
      {% elif trigger.to_state.state == 'off' %}
        shell_command.umount_plex
      {% endif %}

- alias: "Notify when AC Offline"
  id: "notify_ac_offline"
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.thermostat_online
      to: "off"
      for: "00:30:00"
  action:
    - service: notify.pushover
      data:
        message: "The thermostat appears to be offline..."

- alias: "Notify when Verizon Extender Offline"
  id: "notify_verizon_extender_offline"
  initial_state: on
  trigger:
    - platform: state
      entity_id: sensor.verizon_network_extender_status
      from: "In Service"
  action:
    - service: notify.pushover
      data:
        message: "The Verizon extender appears to be out of service..."

- alias: "Notify AC Equipment Event Occurs"
  id: "notify_ac_equipment_event"
  initial_state: on
  trigger:
    - platform: state
      entity_id: sensor.thermostat_latest_equipment_event
  action:
    - service: notify.pushover
      data:
        message: "AC Equipment Event: {{ trigger.to_state.state }}"

- alias: "Notify when AC setting changes"
  id: "ac_notify_change"
  initial_state: on
  trigger:
    - platform: state
      entity_id: sensor.thermostat_setpoint
    - platform: state
      entity_id: sensor.thermostat_operating_mode
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.ac_change_notification
        state: "on"
      - "{{ trigger.from_state.state != trigger.to_state.state }}"
  action:
    - service: notify.pushover
      data:
        message: "{% if trigger.entity_id == 'sensor.thermostat_setpoint' %}Setpoint{% elif trigger.entity_id == 'sensor.thermostat_mode' %}Mode{% endif %}: {{ states('sensor.thermostat_setpoint') }}. Mode: {{ states('sensor.thermostat_operating_mode') }}"

# Working as of 2/12/2020
# Handle all actions for html5 and android push notifications
- alias: HTML5 or Android push notification action button clicked
  id: "html5_android_push"
  trigger:
    - platform: event
      event_type: html5_notification.clicked
    - platform: event
      event_type: mobile_app_notification_action
  action:
    service: >
      {% if trigger.event.data.action == 'turn_ac_off' %}
        script.turn_ac_off
      {% endif %}

- alias: Clear Alexa Recording History
  id: "alexa_history"
  trigger:
    platform: time_pattern
    hours: "/1"
  action:
    - service: alexa_media.clear_history

- alias: "Update door last opened"
  id: "update_door_last_opened"
  trigger:
    - platform: state
      entity_id: 
        - binary_sensor.front_door
        - binary_sensor.back_porch_door
        - binary_sensor.garage_exterior_door
        - binary_sensor.garage_interior_door
        - binary_sensor.master_bedroom_exterior_door
      from: "off"
      to: "on"
  action:
    service: input_datetime.set_datetime
    data:
      entity_id: "input_datetime.{{trigger.entity_id | regex_replace(find='binary_sensor.', replace='') }}_last"
      datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

# Blink a light when the panic pushover alert is acknowledged
- alias: "Panic Script Webhook Trigger"
  id: "panic_script_webhook"
  initial_state: on
  trigger:
    platform: webhook
    webhook_id: !secret panic_script_webhook
  action:
    - service: homeassistant.toggle
      entity_id: switch.master_bathroom_light_switch
    - delay: "00:00:01"
    - service: switch.toggle
      entity_id: switch.master_bathroom_light_switch

- alias: "Pull Recipes Github Webhook"
  id: "recipes_github_pull"
  initial_state: on
  trigger:
    platform: webhook
    webhook_id: !secret github_recipes_webhook
  action:
    - service: shell_command.pull_recipes

- alias: "Power off NAS after backup"
  id: "nas_poweroff_post_backup"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.backups_complete
    to: "on"
  condition:
    condition: time
    after: "03:00:00"
    before: "05:00:00"
    weekday:
      - wed
  action:
    service: homeassistant.turn_off
    entity_id: 
      - switch.nas
      - binary_sensor.backups_complete

- alias: "Turn on office speakers when spotify begins playing including this source"
  id: "office_speakers_spotify"
  initial_state: on
  trigger:
    - platform: state
      entity_id: media_player.spotify
      attribute: source
      to: "Office"
    - platform: state
      entity_id: media_player.spotify
      attribute: source
      to: "Everywhere"
    - platform: state
      entity_id: media_player.spotify
      to: "playing"
  condition: "{{ states('media_player.spotify') == 'playing' and states('switch.andrew_office_speakers') == 'off' and state_attr('media_player.spotify', 'source') in ['Everywhere', 'Office'] }}"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.andrew_office_speakers

- alias: "Turn on speakers and tv when XBOX powers on"
  id: "speakers_with_xbox"
  trigger:
    platform: state
    entity_id: binary_sensor.xbox_power
    to: "on"
  # Hacky workaround to disable trigger at night
  condition: "{{ states('switch.master_bedroom_ceiling_fan') == 'off' }}"
  action:
    service: homeassistant.turn_on
    entity_id: 
      - switch.living_room_speakers
      - switch.tv
      
- alias: "Turn off speakers when tv OR xbox powers off"
  id: "tv_off_with_xbox_off"
  trigger:
    - platform: state
      entity_id: switch.tv
      to: "off"
    - platform: state
      entity_id: binary_sensor.xbox_power
      to: "off"
  # Hacky workaround to disable trigger at night
  condition: "{{ states('switch.master_bedroom_ceiling_fan') == 'off' }}"
  action:
    service: homeassistant.turn_off
    entity_id: 
      - switch.living_room_speakers
      - switch.tv

- alias: "Desk Lamp on when MacBook Active"
  id: "desk_lamp_macbook_active"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.weasel_active
    to: "on"
  condition: "{{ states('light.andrew_desk_lamp') == 'off' and states('person.andrew') == 'home' }}"
  action:
    - service: homeassistant.turn_on
      entity_id: light.andrew_desk_lamp

- alias: "Desk Lamp on when MacBook Inactive"
  id: "desk_lamp_macbook_inactive"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.weasel_active
    to: "off"
    for: '00:15:00'
  condition: "{{ states('light.andrew_desk_lamp') == 'on' and states('person.andrew') == 'home' }}"
  action:
    - service: homeassistant.turn_off
      entity_id: light.andrew_desk_lamp

- alias: "Monitor on when MacBook active"
  id: "monitor_macbook_active"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.weasel_active
    to: 'on'
  condition: "{{ states('person.andrew') == 'home' }}"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.andrew_monitor

- alias: "Monitor off when MacBook inactive"
  id: "monitor_macbook_inactive"
  initial_state: on
  trigger:
    platform: state
    entity_id: binary_sensor.weasel_active
    to: 'off'
    for: '00:30:00'
  condition: "{{ states('person.andrew') == 'home' }}"
  action:
    - service: homeassistant.turn_off
      entity_id: switch.andrew_monitor

- alias: "Water Sensor Alerts"
  id: "water_sensor_alert"
  trigger:
    - platform: state
      entity_id: 
        - binary_sensor.washing_machine_water_detector  
        - binary_sensor.water_heater_water_detector  
        - binary_sensor.guest_bathroom_toilet_water_detector  
        - binary_sensor.back_bathroom_toilet_water_detector
      to: "on"
  action:
    - service: notify.pushover
      data:
        message: >
            Water detected by {{ trigger.to_state.name }}
        data:
          priority: 2
          expire: 3600
          retry: 30

- alias: "Master Closet Light with Motion"
  id: "closet_motion_light"
  trigger:
    - platform: state
      entity_id: "binary_sensor.master_closet_motion_sensor"
      to: "on"
  mode: restart
  action:
    - service: homeassistant.turn_on
      entity_id: switch.master_closet_light
    - delay: "00:05:00"
    - service: homeassistant.turn_off
      entity_id: switch.master_closet_light

- alias: "Sensor Battery Alerts"
  id: "sensor_battery_alert"
  trigger:
    - platform: numeric_state
      entity_id: 
        - sensor.back_bathroom_toilet_water_detector_battery_level
        - sensor.guest_bathroom_toilet_water_detector_battery_level
        - sensor.washing_machine_water_detector_battery_level
        - sensor.hallway_alarm_battery_level
        - sensor.kitchen_alarm_battery_level
        - sensor.garage_interior_motion_battery_level
        - sensor.living_room_motion_battery_level
      below: 10
  action:
    - service: notify.pushover
      data:
        message: "{{ trigger.to_state.name }} battery level at {{ trigger.to_state.state }}%"

- alias: "Update CloudFlare Firewall Rule"
  id: "update_cloudflare_firewall_rule"
  trigger:
    - platform: state
      entity_id: sensor.myip
  condition: '{{ trigger.to_state.state != "unknown" }}'
  action:
    - service: shell_command.update_cloudflare_firewall
      data:
        old: "{{ trigger.from_state.state }}"
        new: "{{ trigger.to_state.state }}"
    - service: notify.pushover
      data:
        message: >
          Cloudflare Firewall Updated {{ trigger.from_state.state }} --> {{ trigger.to_state.state }}

- alias: "Sync Cloudflare CNAME Records"
  id: "sync_cloudflare_cnames"
  trigger:
    platform: event
    event_type: folder_watcher
    event_data:
      event_type: modified
  action:
    - service: shell_command.sync_cloudflare_records

- alias: "Compost Turn Reset"
  id: "compost_turn_reset"
  trigger:
    - platform: state
      entity_id: input_boolean.compost_turn
      to: "on"
  action:
    - delay: "00:01:00"
    - service: homeassistant.turn_off
      entity_id: input_boolean.compost_turn

- alias: "Mailbox Reset"
  id: "mailbox_reset"
  trigger:
    - platform: state
      entity_id: binary_sensor.mailbox
      to: "on"
  action:
    - delay: "00:01:00"
    - service: homeassistant.turn_off
      entity_id: binary_sensor.mailbox

- alias: "Smoke Alarm Detection"
  id: "smoke_alarm_detection"
  initial_state: on
  trigger:
    platform: state
    entity_id:
      - binary_sensor.kitchen_alarm_co_alarm_alarm_silenced
      - binary_sensor.kitchen_alarm_co_alarm_carbon_monoxide_detected
      - binary_sensor.kitchen_alarm_co_alarm_replacement_required_end_of_life
      - binary_sensor.kitchen_alarm_smoke_alarm_alarm_silenced
      - binary_sensor.kitchen_alarm_smoke_alarm_smoke_alarm_test
      - binary_sensor.kitchen_alarm_smoke_alarm_smoke_detected
      - binary_sensor.kitchen_alarm_system_system_hardware_failure
      - binary_sensor.hallway_alarm_co_alarm_alarm_silenced
      - binary_sensor.hallway_alarm_co_alarm_carbon_monoxide_detected
      - binary_sensor.hallway_alarm_co_alarm_replacement_required_end_of_life
      - binary_sensor.hallway_alarm_smoke_alarm_alarm_silenced
      - binary_sensor.hallway_alarm_smoke_alarm_smoke_alarm_test
      - binary_sensor.hallway_alarm_smoke_alarm_smoke_detected
      - binary_sensor.hallway_alarm_system_system_hardware_failure
    from: "off"
    to: "on"
  action:
    - service: notify.pushover
      data:
        message: >
            {{ trigger.from_state.attributes.friendly_name }}
        data:
          # Make phone ding if alarm or test, otherwise silent notification
          priority: '{% if "_detected" in trigger.entity_id or "_test" in trigger.entity_id %}2{% else %}-1{% endif %}'
          expire: 3600
          retry: 30

# - id: webhook_debugger
#   alias: "Webhook Debugger"
#   trigger:
#     - platform: webhook
#       webhook_id: !secret test_webhook
#   action:
#     - service: persistent_notification.create
#       data:
#         message: >-
#           {% if 'data' in trigger %}
#             Data: {{ dict(trigger.data)|tojson }}
#           {% elif 'json' in trigger %}
#             JSON: {{ dict(trigger.json)|tojson }}
#             {{ dict(trigger.json)['payload']['object']['presence_status'] }}
#           {% endif %}
#           {% if 'query' in trigger and trigger.query|length > 0 %}
#             Query: {{ dict(trigger.query)|tojson }}
#           {% endif %}

- alias: "Watchtower Updates"
  id: "watchertower_run_update"
  trigger:
    - platform: time
      at: "15:00:00"
    - platform: time
      at: "20:00:00"
  condition:
    condition: and
    conditions:
      - condition: time
        weekday:
          - sun
          - mon
          - wed
          - fri
      - "{{ states('person.andrew') == 'home'}}"
  action:
      # Watchtower runs once at container start then turns back off
    - service: homeassistant.turn_on
      entity_id: switch.docker_watchtower

- alias: "Update Utilities Cost"
  id: "update_utilities_cost"
  mode: parallel
  trigger:
    - platform: state
      entity_id: 
        - sensor.electric_utilities_summary
        - sensor.electric_utilities_daily
        - sensor.electric_utilities_realtime
    - platform: homeassistant
      event: start
  action:
    - service: python_script.add_elecrtric_cost_attribute
      data:
        entity_id: sensor.electric_utilities_summary
    - service: python_script.add_elecrtric_cost_attribute
      data:
        entity_id: sensor.electric_utilities_daily
    - service: python_script.add_elecrtric_cost_attribute
      data:
        entity_id: sensor.electric_utilities_realtime

- alias: "Update USPS Mail Camera Path on Hass Restart"
  id: "usps_mail_path_update"
  trigger:
    - platform: state
      entity_id: sensor.mail_updated
    - platform: homeassistant
      event: start
  action:
    - service: local_file.update_file_path
      data_template:
        entity_id: camera.mail_usps
        file_path: "{{ states('sensor.mail_image_system_path') }}"

- alias: "Fingerprint Safe Open"
  id: "fingerprint_safe"
  trigger:
    platform: state
    entity_id: sensor.fingerprint_state
    to: "Authorized finger"
  condition: "{{ states('sensor.fingerprint_last_finger_id') in ['1','2'] }}"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.safe
    - service: notify.pushover
      data:
        message: "Safe opened by {% if states('sensor.fingerprint_last_finger_id') == '1' %}Andrew right index{% elif states('sensor.fingerprint_last_finger_id') == '2' %}Andrew left index{% endif %}!"
        # data:
        #   priority: 2
        #   expire: 3600
        #   retry: 30

- alias: "Covid Test Result"
  id: "covid_test_result"
  trigger:
    - platform: state
      entity_id: sensor.andrew_covid_test_result
      from: None
    - platform: state
      entity_id: sensor.bethany_covid_test_result
      from: None
  action:
    - service: notify.pushover
      data:
        message: "{{ trigger.to_state.name }}: {{ trigger.to_state.state }}"

- alias: "Sync Alexa Timers"
  id: "sync_alexa_timers"
  trigger:
    - platform: state
      entity_id: sensor.kitchen_next_timer
      to: "active"
  action:
    - service: '{% if trigger.to_state.state == "unavailable" %}timer.cancel{% else %}timer.start{% endif %}'
      data:
        duration: '{{ as_timestamp(states("sensor.kitchen_next_timer")) - as_timestamp(now()) }}'
        entity_id: timer.kitchen_alexa

- alias: "315Mhz Remote"
  id: "315mhz_remote"
  trigger:
    - platform: mqtt
      topic: 'sensor/rtl_433_test'
      value_template: "{{ value_json.model }}"
      payload: 'Smoke-GS558'
  action:
    service: >
      {% if trigger.payload_json.code == "87f7b0" %}
        homeassistant.turn_on
      {% elif trigger.payload_json.code == "67f7b0" %}
        homeassistant.turn_off
      {% endif %}
    entity_id: group.christmas_trees